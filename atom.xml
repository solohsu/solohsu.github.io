<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[sOlOHsU's Blog<sup>&#946;</sup>]]></title>
  <link href="http://www.solohsu.com/atom.xml" rel="self"/>
  <link href="http://www.solohsu.com/"/>
  <updated>2014-04-26T22:14:59+08:00</updated>
  <id>http://www.solohsu.com/</id>
  <author>
    <name><![CDATA[Solo Hsu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java基础之ClassLoader]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/26/java-classloader/"/>
    <updated>2014-04-26T21:47:23+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/26/java-classloader</id>
    <content type="html"><![CDATA[<h3>什么是类加载器</h3>

<p>类加载器是一个用来加载类文件的类。Java源代码通过javac编译器编译成类文件。然后JVM来执行类文件中的字节码来执行程序。类加载器负责加载文件系统、网络或其他来源的类文件。有三种默认使用的类加载器：Bootstrap类加载器、Extension类加载器和System类加载器（在HotSpot中的实现叫作Application类加载器）。每种类加载器都有设定好从哪里加载类。</p>

<ul>
<li>Bootstrap类加载器负责加载rt.jar中的JDK类文件，它是所有类加载器的父加载器。Bootstrap类加载器没有任何父类加载器，如果你调用<code>String.class.getClassLoader()</code>，会返回<code>null</code>，任何基于此的代码会抛出<code>NUllPointerException</code>异常。Bootstrap加载器被称为初始类加载器。</li>
<li>而Extension将加载类的请求先委托给它的父加载器，也就是Bootstrap，如果没有成功加载的话，再从jre/lib/ext目录下或者java.ext.dirs系统属性定义的目录下加载类。Extension加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现。</li>
<li>第三种默认的加载器就是System类加载器（又叫作Application类加载器）了。它负责从classpath环境变量中加载某些应用相关的类，classpath环境变量通常由-classpath或-cp命令行选项来定义，或者是JAR中的Manifest的classpath属性。Application类加载器是Extension类加载器的子加载器。通过<code>sun.misc.Launcher$AppClassLoader</code>实现。</li>
</ul>


<p>除了Bootstrap类加载器是大部分由C++来写的，其他的类加载器都是通过继承<code>java.lang.ClassLoader</code>来实现的。</p>

<p><img src="http://www.solohsu.com/images/java_classloader_hierarchy.png"></p>

<h3>类加载器的工作原理</h3>

<p>类加载器的工作原理基于三个机制：委托、可见性和单一性。这一节，我们来详细看看这些规则，并用一个实例来理解工作原理。下面显示的是类加载器使用委托机制的工作原理。</p>

<h4>委托机制</h4>

<p>当一个类加载和初始化的时候，类仅在有需要加载的时候被加载。假设你有一个应用需要的类叫作<code>Abc.class</code>，首先加载这个类的请求由Application类加载器委托给它的父类加载器Extension类加载器，然后再委托给Bootstrap类加载器。Bootstrap类加载器会先看看rt.jar中有没有这个类，因为并没有这个类，所以这个请求由回到Extension类加载器，它会查看jre/lib/ext目录下有没有这个类，如果这个类被Extension类加载器找到了，那么它将被加载，而Application类加载器不会加载这个类；而如果这个类没有被Extension类加载器找到，那么再由Application类加载器从classpath中寻找。</p>

<h4>可见性机制</h4>

<p>根据可见性机制，子类加载器可以看到父类加载器加载的类，而反之则不行。所以下面的例子中，当Abc.class已经被Application类加载器加载过了，然后如果想要使用Extension类加载器加载这个类，将会抛出<code>java.lang.ClassNotFoundException</code>异常。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kn">package</span> <span class="n">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">java.util.logging.Level</span><span class="o">;</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Java program to demonstrate How ClassLoader works in Java,</span>
</span><span class='line'><span class="cm">     * in particular about visibility principle of ClassLoader.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @author Javin Paul</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassLoaderTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//printing ClassLoader of this class</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ClassLoaderTest.getClass().getClassLoader() : &quot;</span>
</span><span class='line'>                                     <span class="o">+</span> <span class="n">ClassLoaderTest</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">//trying to explicitly load this class again using Extension class loader</span>
</span><span class='line'>                <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;test.ClassLoaderTest&quot;</span><span class="o">,</span> <span class="kc">true</span>
</span><span class='line'>                                <span class="o">,</span>  <span class="n">ClassLoaderTest</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">().</span><span class="na">getParent</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ClassLoaderTest</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">log</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">SEVERE</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ClassLoaderTest.getClass().getClassLoader() : sun.misc.Launcher$AppClassLoader@601bb1
</span><span class='line'>  16/08/2012 2:43:48 AM test.ClassLoaderTest main
</span><span class='line'>  SEVERE: null
</span><span class='line'>  java.lang.ClassNotFoundException: test.ClassLoaderTest
</span><span class='line'>          at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
</span><span class='line'>          at java.security.AccessController.doPrivileged(Native Method)
</span><span class='line'>          at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
</span><span class='line'>          at sun.misc.Launcher$ExtClassLoader.findClass(Launcher.java:229)
</span><span class='line'>          at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
</span><span class='line'>          at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
</span><span class='line'>          at java.lang.Class.forName0(Native Method)
</span><span class='line'>          at java.lang.Class.forName(Class.java:247)
</span><span class='line'>          at test.ClassLoaderTest.main(ClassLoaderTest.java:29)</span></code></pre></td></tr></table></div></figure>


<h4>单一性机制</h4>

<p>根据这个机制，父加载器加载过的类不能被子加载器加载第二次。虽然重写违反委托和单一性机制的类加载器是可能的，但这样做并不可取。你写自己的类加载器的时候应该严格遵守这三条机制。</p>

<h3>如何显式的加载类</h3>

<p>Java提供了显式加载类的API：<code>Class.forName(classname)</code>和<code>Class.forName(classname, initialized, classloader)</code>。就像上面的例子中，你可以指定类加载器的名称以及要加载的类的名称。类的加载是通过调用<code>java.lang.ClassLoader的loadClass()</code>方法，而<code>loadClass()</code>方法则调用了<code>findClass()</code>方法来定位相应类的字节码。在这个例子中Extension类加载器使用了<code>java.net.URLClassLoader</code>，它从JAR和目录中进行查找类文件，所有以”/”结尾的查找路径被认为是目录。如果<code>findClass()</code>没有找到那么它会抛出<code>java.lang.ClassNotFoundException</code>异常，而如果找到的话则会调用<code>defineClass()</code>将字节码转化成类实例，然后返回。</p>

<h3>什么地方使用类加载器</h3>

<p>类加载器是个很强大的概念，很多地方被运用。最经典的例子就是AppletClassLoader，它被用来加载Applet使用的类，而Applets大部分是在网上使用，而非本地的操作系统使用。使用不同的类加载器，你可以从不同的源地址加载同一个类，它们被视为不同的类。J2EE使用多个类加载器加载不同地方的类，例如WAR文件由Web-app类加载器加载，而EJB-JAR中的类由另外的类加载器加载。有些服务器也支持热部署，这也由类加载器实现。你也可以使用类加载器来加载数据库或者其他持久层的数据。</p>

<p>参考资料：</p>

<ul>
<li><a href="http://www.importnew.com/6581.html">http://www.importnew.com/6581.html</a></li>
<li><a href="http://www.blogjava.net/mstar/archive/2006/08/24/65505.html">http://www.blogjava.net/mstar/archive/2006/08/24/65505.html</a></li>
<li><a href="http://blog.csdn.net/xyang81/article/details/7292380">http://blog.csdn.net/xyang81/article/details/7292380</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿里校园招聘暑期实习二面面经]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/22/2014-alibaba-summer-intern-2nd-interview/"/>
    <updated>2014-04-22T14:42:16+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/22/2014-alibaba-summer-intern-2nd-interview</id>
    <content type="html"><![CDATA[<p>来自2015届校招群里的波波同学：</p>

<ol>
<li>自我介绍</li>
<li>最出彩的项目，聊项目，遇到的难题</li>
<li>WebService相关相关知识，写wsdl文档的格式、webservice、uddi、wsdl（说明文档）、soap</li>
<li>spring的理解，spring的Ioc原理、并发性（内存的占用怎么样）</li>
<li>java的jvm的内存模式（堆。栈、代码区、数据区）、内存回收机制（自己回收）、jvm内存的设置（不知道）</li>
<li>编程：找出字符串中的url</li>
<li>HR：你研究生和本科生最大的进步是什么（目标更加明确，对自身更加了解）</li>
<li>还找了其他的实习吗？进度？你为什么选择阿里？（分布式计算）</li>
<li>你最近有没有感兴趣的技术，技术进步的主要手段（网络）。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在.NET Compact Framework中使用后台任务]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/21/dot-net-compact-framework-background-task/"/>
    <updated>2014-04-21T11:12:43+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/21/dot-net-compact-framework-background-task</id>
    <content type="html"><![CDATA[<p>最近在做一个Windows Mobile平台客户端的项目，需要在后台线程中连接服务器并进行消息的发送和接收。</p>

<h3>后台任务</h3>

<p>由于之前也没接触过C#，所以查找了一下相关资料，发现基本上有使用BackgroundWorker和直接使用Thread两种实现方式。</p>

<p>BackgroundWorker看名字应该类似于Android平台中AsynTask，为了方便编写简单的非UI后台任务而对Thread进行了封装。由于之前的Android客户端中收发消息都是使用的AsynTask，并且后台任务的逻辑也比较简单，BackgroundWorker完全能够满足要求。</p>

<p>写代码时发现没有找到BackgroundWorker这个类，想到Windows Mobile平台使用的是.NET Compact Framework，江湖人称.NET CF,Google了一下，果然CF是不支持BackgroundWorker的，只好另寻他法。</p>

<p>Google之后发现已经有人问过这个问题：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/1323596/net-compact-fw-3-5-background-worker" title=".NET Compact Fw 3.5: Background worker">http://stackoverflow.com/questions/1323596/net-compact-fw-3-5-background-worker</a></li>
</ul>


<p>回答中有人建议自己写一个BackgroundWorker，也有人建议参考微软官方的这篇文章：</p>

<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/aa446488.aspx" title="Microsoft .NET Compact Framework Background Processing Techniques">http://msdn.microsoft.com/en-us/library/aa446488.aspx</a></li>
</ul>


<p>这篇文章中提到了在.NET CF中创建后台任务的三种方式：</p>

<ol>
<li>异步访问Web Service</li>
<li>线程池</li>
<li>显示的创建线程</li>
</ol>


<p>根据我们的应用场景我最终选择了线程池这种比较简单的方式。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>       <span class="k">void</span> <span class="nf">ReadBigFile2</span><span class="p">(</span><span class="kt">object</span> <span class="n">val</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">dataFile</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="n">val</span> <span class="p">;</span> <span class="c1">// val is a reference to fName</span>
</span><span class='line'>        <span class="c1">// Do work to read and process dataFile</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>     <span class="k">public</span> <span class="k">void</span> <span class="nf">btnStartRead_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">fName</span> <span class="p">=</span> <span class="err">“</span><span class="n">BigDataFile</span><span class="p">.</span><span class="n">xml</span><span class="err">”</span> <span class="p">;</span>
</span><span class='line'>        <span class="n">WaitCallback</span> <span class="n">w</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WaitCallback</span><span class="p">(</span><span class="n">ReadBigFile2</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>        <span class="c1">// fName will be passed to ReadBigFile</span>
</span><span class='line'>        <span class="n">ThreadPool</span><span class="p">.</span><span class="n">QueueUserWorkItem</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">fName</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看默认的线程池中辅助线程的最大数目和异步I/O线程的最大数目：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>   <span class="kt">int</span> <span class="n">workerThreads</span><span class="p">,</span> <span class="n">completionPortThreads</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ThreadPool</span><span class="p">.</span><span class="n">GetMaxThreads</span><span class="p">(</span><span class="k">out</span> <span class="n">workerThreads</span><span class="p">,</span> <span class="k">out</span> <span class="n">completionPortThreads</span><span class="p">);</span>
</span><span class='line'>  <span class="n">System</span><span class="p">.</span><span class="n">Diagnostics</span><span class="p">.</span><span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">workerThreads</span><span class="p">);</span>  <span class="c1">// 25</span>
</span><span class='line'>  <span class="n">System</span><span class="p">.</span><span class="n">Diagnostics</span><span class="p">.</span><span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">completionPortThreads</span><span class="p">);</span><span class="c1">// 500</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以使用<code>ThreadPool.SetMaxThreads</code>方法按需修改。</p>

<h3>在后台任务中操纵UI控件</h3>

<p>将消息收发转到后台线程之后，就不能直接在收发消息时直接操纵UI控件了，需要在UI线程中定义好操纵控件的方法，然后在后台线程中使用<code>Control.Invoke</code>或者<code>Control.BeginInvoke</code>方法通过委托的方式进行调用，<code>Invoke</code>与<code>BeginInvoke</code>的区别是前者在进行委托调用时后台线程会阻塞，而后者使用的是异步委托调用。详细分析可以参考这几篇博文：</p>

<ul>
<li><a href="http://www.cnblogs.com/mashang/archive/2009/08/01/1536730.html" title="c# Invoke和BeginInvoke 区别">http://www.cnblogs.com/mashang/archive/2009/08/01/1536730.html</a></li>
<li><a href="http://blog.csdn.net/ansencumt/article/details/6024775" title="在WM下，获得当前路径处理和解决异常“Control.Invoke 必须用于与在独立线程上创建的控件交互。”">http://blog.csdn.net/ansencumt/article/details/6024775</a></li>
</ul>


<h3>关于WaitCursor</h3>

<p>在Android中执行后台任务时，我们通常会在界面上覆盖一个指示后台任务正在运行的ProgressDialog。</p>

<p>C#中可以使用<code>Cursor.Current = Cursors.WaitCursor;</code>来显示一个等待指示器。但是这时我们依然可以对界面中的控件进行操作，简单的解决方法是后台任务开始时使用<code>this.Enabled = false;</code>将当前窗体设为不可用，执行结束后<code>this.Enabled = true;</code>再恢复可用。缺点是整个界面会变成灰色。</p>

<ul>
<li><a href="http://www.codeproject.com/Questions/245525/wait-cursor-comes-but-still-i-am-able-to-click-the" title="wait cursor comes but still i am able to click the button">http://www.codeproject.com/Questions/245525/wait-cursor-comes-but-still-i-am-able-to-click-the</a></li>
</ul>


<h3>参考资料</h3>

<ul>
<li><a href="http://www.cnblogs.com/leslies2/archive/2012/02/07/2310495.html" title="C#综合揭秘——细说多线程（上）">http://www.cnblogs.com/leslies2/archive/2012/02/07/2310495.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Octopress添加Categories侧边栏]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/21/add-category-list-to-octopress/"/>
    <updated>2014-04-21T01:23:05+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/21/add-category-list-to-octopress</id>
    <content type="html"><![CDATA[<h4>增加category_list插件</h4>

<p>保存到 plugins/category_list_tag.rb：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="c1"># encoding: UTF-8</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">CategoryListTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="n">categories</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>        <span class="n">categories</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>          <span class="n">posts_in_category</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">[</span><span class="n">category</span><span class="o">].</span><span class="n">size</span>
</span><span class='line'>          <span class="n">category_dir</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;category_dir&#39;</span><span class="o">]</span>
</span><span class='line'>          <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;li class=&#39;category&#39;&gt;&lt;a href=&#39;/</span><span class="si">#{</span><span class="n">category_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">category</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">/&#39;&gt;</span><span class="si">#{</span><span class="n">category</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">posts_in_category</span><span class="si">}</span><span class="s2">)&lt;/a&gt;&lt;/li&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">html</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;category_list&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:CategoryListTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong>：一定要在文件的开始添加<code># encoding: UTF-8</code>这一行，否则无法支持中文分类。</p>

<h4>增加aside</h4>

<p>保存到 source/_includes/asides/category_list.html：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>Categories<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      \{\% category_list %\}\   //添加时去掉4个\
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>修改_config.yml文件</h4>

<p>将category_list添加到default_asides：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="err">   </span><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">asides/category_list.html</span><span class="p-Indicator">,</span> <span class="nv">asides/recent_posts.html</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装这个插件后直接可以支持中文分类，url中使用的是分类的拼音，如「数据库」对应「shu-ju-ku」。如果使用中文分类时遇到各种错误，请参考下面这两篇文章：</p>

<ul>
<li><a href="http://aiku.me/bar/10393365" title="Octopress博客分类添加中文支持">http://aiku.me/bar/10393365</a></li>
<li><a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/" title="关于在64位 Windows 7 中部署中文化的Octopress">http://blog.sprabbit.com/blog/2012/03/23/octopress/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL锁表与解锁]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/20/mysql-lock-and-unlock-tables/"/>
    <updated>2014-04-20T20:14:04+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/20/mysql-lock-and-unlock-tables</id>
    <content type="html"><![CDATA[<h2>LOCK TABLES</h2>

<h3>锁表语法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">LOCK</span> <span class="n">TABLES</span>
</span><span class='line'>      <span class="n">tbl_name</span> <span class="p">[[</span><span class="k">AS</span><span class="p">]</span> <span class="k">alias</span><span class="p">]</span> <span class="n">lock_type</span>
</span><span class='line'>      <span class="p">[,</span> <span class="n">tbl_name</span> <span class="p">[[</span><span class="k">AS</span><span class="p">]</span> <span class="k">alias</span><span class="p">]</span> <span class="n">lock_type</span><span class="p">]</span> <span class="p">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">lock_type</span><span class="p">:</span>
</span><span class='line'>      <span class="k">READ</span> <span class="p">[</span><span class="k">LOCAL</span><span class="p">]</span>
</span><span class='line'>    <span class="o">|</span> <span class="p">[</span><span class="n">LOW_PRIORITY</span><span class="p">]</span> <span class="k">WRITE</span>
</span></code></pre></td></tr></table></div></figure>


<p>会话只能为自己获取、释放锁，不能为其他会话获取锁，也不能释放其他会话持有的锁。</p>

<p><code>LOCK TABLES</code>隐式的为当前会话获取表锁。表锁的对象可以是表也可以是视图。</p>

<p>获取视图锁时，<code>LOCK TABLES</code>命令会自动锁定所有与该视图相关的基本表。</p>

<p>使用<code>LOCK TABLES</code>显示的锁定一个表时，这个表的触发器中涉及到的表也会被隐式的锁定，锁的类型取决于触发器中对该表进行了何种操作。</p>

<p>表锁只是用来防止其他会话进行不恰当的操作，持有锁的会话，即使持有的仅仅是读锁，也可以进行诸如<code>DROP TABLE</code>之类的表级操作。而由于<code>TRUNCATE</code>操作不是事务安全的，所以在活动的事务或者持有表锁时尝试执行<code>TRUNCATE</code>操作时会报错。</p>

<p>另外，虽然可以对临时表执行锁表操作，但是实际上会被自动忽略掉，不执行任何操作。因为临时表只对当前会话（也就是创建它的会话）是可见的。</p>

<h3>锁的类型</h3>

<h4>READ [LOCAL]锁</h4>

<ul>
<li>持有读锁的会话可以读表，但是不能写表。</li>
<li>多个会话可以同时获得同一个表的读锁。</li>
<li>其他的会话不用获取该表的读锁也可以读取该表。</li>
<li><code>LOCAL</code>修饰符允许其他会话执行无冲突的插入语句。但是，如果是在服务器之外的进程上进行操作时，就不能使用<code>READ LOCAL</code>了。另外，对于使用InnoDB引擎的表来说，<code>READ LOCAL</code>与<code>READ</code>没有任何区别。</li>
</ul>


<h4>[LOW_PRIORITY] WRITE锁</h4>

<ul>
<li>持有写锁的会话可以读表也可以写表。</li>
<li>只有持有写锁的会话可以访问该表。写锁释放前其他会话都不能对该表进行访问。</li>
<li>表被写锁锁定时，其他会话对该表的锁定请求将会被阻塞。</li>
<li><code>LOW_PRIORITY</code>修饰符已被弃用（当前版本为5.7）。直接使用<code>WRITE</code>即可。</li>
</ul>


<p>锁表语句会一直阻塞直到获取到所有需要的锁。
需要对表进行锁定的会话必须一次性的获取到所有它需要锁，因为一旦锁表语句执行完成，该会话就只能访问被锁的表了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   mysql&gt; LOCK TABLES t1 READ;
</span><span class='line'>  mysql&gt; SELECT COUNT<span class="o">(</span>*<span class="o">)</span> FROM t1;
</span><span class='line'>  +----------+
</span><span class='line'>  | COUNT<span class="o">(</span>*<span class="o">)</span> |
</span><span class='line'>  +----------+
</span><span class='line'>  |        3 |
</span><span class='line'>  +----------+
</span><span class='line'>  mysql&gt; SELECT COUNT<span class="o">(</span>*<span class="o">)</span> FROM t2;
</span><span class='line'>  ERROR 1100 <span class="o">(</span>HY000<span class="o">)</span>: Table <span class="s1">&#39;t2&#39;</span> was not locked with LOCK TABLES
</span></code></pre></td></tr></table></div></figure>


<p><code>INFORMATION_SCHEMA</code>数据库中的表是个例外。即使有会话对这些表进行了锁定，其他会话依然可以继续访问。</p>

<p>在一条查询语句中无法多次对锁定的表使用同一个名字进行引用。这种情况下可以使用表的别名，并且对每一个别也要加一个锁：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   mysql&gt; LOCK TABLE t WRITE, t AS t1 READ;
</span><span class='line'>  mysql&gt; INSERT INTO t SELECT * FROM t;
</span><span class='line'>  ERROR 1100: Table <span class="s1">&#39;t&#39;</span> was not locked with LOCK TABLES
</span><span class='line'>  mysql&gt; INSERT INTO t SELECT * FROM t AS t1;
</span></code></pre></td></tr></table></div></figure>


<p>不对表的别名进行锁定的话，就无法使用别名对该表进行访问：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   mysql&gt; LOCK TABLE t READ;
</span><span class='line'>  mysql&gt; SELECT * FROM t AS myalias;
</span><span class='line'>  ERROR 1100: Table <span class="s1">&#39;myalias&#39;</span> was not locked with LOCK TABLES
</span></code></pre></td></tr></table></div></figure>


<p>相反，如果只对别名进行了锁定，则只能使用别名对其进行访问：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   mysql&gt; LOCK TABLE t AS myalias READ;
</span><span class='line'>  mysql&gt; SELECT * FROM t;
</span><span class='line'>  ERROR 1100: Table <span class="s1">&#39;t&#39;</span> was not locked with LOCK TABLES
</span><span class='line'>  mysql&gt; SELECT * FROM t AS myalias;
</span></code></pre></td></tr></table></div></figure>


<p>写锁通常相对读锁有更高的优先级，以确保更新操作尽快得到处理。这就意味着如果同时有写锁和读锁两个请求，那么写锁会先得到响应。<code>LOCK TABLES</code>获取锁的过程如下：</p>

<ol>
<li>使用内部定义的顺序对所有将被加锁的表进行排序，这一步对于用户来说是透明的。</li>
<li>如果一个表同时有读锁和写锁两个请求，将写锁请求放到读锁请求之前。</li>
<li>每次锁定一个表直到当前会话获取到所有的需要的锁，并保证不会产生死锁。</li>
</ol>


<p>对分表进行锁定和解锁时，会锁定或者解锁整个表。</p>

<h2>UNLOCK TABLES</h2>

<h3>解锁语法</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="n">UNLOCK</span> <span class="n">TABLES</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>UNLOCK TABLES</code>将显示的释放掉由当前会话持有的所有表锁。</p>

<p><code>LOCK TABLES</code>会在获取新锁之前隐式的释放掉当前会话持有的所有表锁。</p>

<p>会话开始一个事务（例如使用<code>START TRANSACTION</code>）时，会隐式的执行<code>UNLOCK TABLES</code>。</p>

<p>无论会话正常退出或者异常终止，服务器都会隐式的释放掉该会话持有的所有锁。客户端重新连接后，这些锁不会再生效。另外，如果客户端断开时正在执行一个事务，服务器会自动回滚该事务，客户端重连后，新会话将会自动设置为自动提交模式。因此，最好禁用客户端的auto-reconnec。在启用自动重连的情况下，重连后客户端其实已经丢失了所有的锁和事务，但是不会被通知。而当禁用掉自动重连时，一旦连接断开，在一个将被执行的语句处会报错。这样一来客户端就可以检测到这个错误，并采取适当的措施，比如重新获取需要的锁，重新执行之前的事务。</p>

<p>在被锁定的表上执行<code>ALTER TABLE</code>语句后，将使该表变为未锁定状态。如果对该表再执行一条<code>ALTER TABLE</code>语句，就会报错：Table &lsquo;tbl_name&rsquo; was not locked with LOCK TABLES。这种情况下可以在执行完第一条<code>ALTER TABLE</code>后，重新对该表进行锁定。</p>

<p><code>UNLOCK TABLES</code>还可以用来释放之前通过<code>FLUSH TABLES WITH READ LOCK</code>获得的全局读锁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014暑期实习面试]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/18/summer-intern-interview-summary/"/>
    <updated>2014-04-18T21:36:39+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/18/summer-intern-interview-summary</id>
    <content type="html"><![CDATA[<h3>腾讯移动客户端开发</h3>

<h4>一面</h4>

<ul>
<li>介绍项目</li>
<li>两道题目

<ul>
<li>如何从10亿个QQ号中快速查找给定的QQ号</li>
<li>RGB2YUV快速算法</li>
</ul>
</li>
<li>详细介绍项目中的移动端</li>
</ul>


<h4>二面</h4>

<ul>
<li>介绍项目，项目中的APP的亮点和技术难度</li>
<li>纸上写代码：单链表的反转</li>
<li>闲扯

<ul>
<li>用过最出色的APP、最差的APP</li>
<li>微信和QQ比较</li>
<li>微信哪些不足</li>
<li>还用过哪些其他的社交APP</li>
</ul>
</li>
</ul>


<h4>HR面</h4>

<p>都是轻松的话题</p>

<ul>
<li>本科学校</li>
<li>本科和研究生有没有开设Android的课程</li>
<li>Android是自学的吗，为什么不做IOS应用开发</li>
<li>哪里人，山东学生考北京学校的挺多</li>
<li>前两面的面试官有没有跟你说过你将来到公司做什么</li>
<li>做过前端，前端和客户端开发你更倾向于哪个</li>
<li>阿里校招有没有参加，结果如何</li>
<li>平时的兴趣爱好，水平如何</li>
<li>到哪看美剧</li>
<li>实习时间</li>
</ul>


<h3>阿里Java研发</h3>

<h4>一面</h4>

<ul>
<li>介绍项目

<ul>
<li>详细介绍项目开发中最有挑战性的部分</li>
<li>Spring框架的好处</li>
</ul>
</li>
<li>数据库

<ul>
<li>如何加锁</li>
<li>锁的级别</li>
<li>事务控制

<ul>
<li>给了一道题</li>
</ul>
</li>
<li>乐观锁、悲观锁</li>
<li>索引

<ul>
<li>索引的种类</li>
<li>聚簇索引</li>
<li>索引的结构

<ul>
<li>B+树</li>
</ul>
</li>
<li>红黑树</li>
</ul>
</li>
</ul>
</li>
<li>复杂的业务逻辑、对象依赖</li>
<li>面向对象的特征

<ul>
<li>举例说明</li>
</ul>
</li>
</ul>


<p>下面整理了一些大牛的面试总结：</p>

<ul>
<li>阿里Java研发一面：<a href="http://blog.csdn.net/henryfabrgeas/article/details/23700799" title="2014阿里巴巴面试经验-北京站研发工程师">http://blog.csdn.net/henryfabrgeas/article/details/23700799</a></li>
<li>阿里Java研发二面：<a href="http://blog.csdn.net/henryfabrgeas/article/details/24260553" title="阿里实习生2014二面总结">http://blog.csdn.net/henryfabrgeas/article/details/24260553</a></li>
<li>阿里C++研发电面：<a href="http://www.cnblogs.com/weixliu/p/3606401.html" title="阿里巴巴电话面试记录">http://www.cnblogs.com/weixliu/p/3606401.html</a></li>
<li>阿里C++研发现场面：<a href="http://www.cnblogs.com/weixliu/p/3659856.html" title="吐槽下阿里巴巴实习招聘">http://www.cnblogs.com/weixliu/p/3659856.html</a></li>
<li>腾讯软件开发北京笔试：<a href="http://www.cnblogs.com/weixliu/p/3667972.html" title="腾讯2014实习北京笔试">http://www.cnblogs.com/weixliu/p/3667972.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Java快速处理大数据量的输入]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/07/faster-java-io-in-acm/"/>
    <updated>2014-04-07T14:37:20+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/07/faster-java-io-in-acm</id>
    <content type="html"><![CDATA[<p>这里以读取<code>int</code>类型的数据为例。</p>

<h3><code>Scanner</code></h3>

<h4>直接使用<code>nextInt()</code></h4>

<p>虽然是最方便的，但是也是最慢的。建议数据量小的时候使用。数据量大的情况下多半会超时。直接使用<code>nextInt()</code>方法的时候一般都会用<code>BufferedInputStream</code>封装一下输入流，速度能稍微快一些。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">BufferedInputStream</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">long</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLong</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">cols</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scanner</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用<code>next()</code>, 然后手动<code>Integer.parseInt()</code></h4>

<p>这样能比直接使用<code>nextInt()</code>快不少，查看一下<code>nextInt()</code>的源码我们可以发现：<code>nextInt()</code>方法先用正则表达式从流中获取一个表示整型的字符串<code>s</code>，最后再返回<code>Integer.parseInt(s)</code>。多出的时间都消耗在进行模式匹配上了，这其实也就是直接使用<code>nextInt()</code>比较慢的原因之一。而如果我们事先知道输入的数据类型的话，就不用进行匹配，直接解析就可以了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">BufferedInputStream</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">long</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">cols</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scanner</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>BufferedReader</code> + <code>StringTokenizer</code></h3>

<p>使用<code>BufferedReader</code>按行读取，然后使用<code>StringTokenizer</code>获取每一行中使用空格符隔开的所有元素。速度甚至比C语言的<code>scanf()</code>还要快。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'>    <span class="n">StringTokenizer</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">cols</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(!</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>实际测试结果</h3>

<p>用以上三种方式从文件中读取10,000,000个<code>int</code>型数值所消耗的时间分别为 11.52秒，7.486秒，2.159秒。使用gcc的<code>fscanf()</code>所用时间为 5.303秒。</p>

<p>读取10,000,000个<code>double</code>型数值所消耗的时间分别为 41.125秒，16.082秒，9.271秒。使用gcc的<code>fscanf()</code>所用时间为 11.279秒。</p>

<h3>总结</h3>

<p>虽然使用<code>BufferedReader</code>和<code>StringTokenizer</code>处理输入可以获得让人满意的速度，但是需要写的代码相对来说是比较多的。在ACM比赛时可以准备一个工具类，比赛开始时，让一个人先把这个类写出来备用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="cm">/** Class for buffered reading int and double values */</span>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">Reader</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">static</span> <span class="n">BufferedReader</span> <span class="n">reader</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">static</span> <span class="n">StringTokenizer</span> <span class="n">tokenizer</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>      <span class="cm">/** call this method to initialize reader for InputStream */</span>
</span><span class='line'>      <span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span>
</span><span class='line'>                       <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">input</span><span class="o">)</span> <span class="o">);</span>
</span><span class='line'>          <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="cm">/** get next word */</span>
</span><span class='line'>      <span class="kd">static</span> <span class="n">String</span> <span class="nf">next</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">(</span> <span class="o">!</span> <span class="n">tokenizer</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">//TODO add check for eof if necessary</span>
</span><span class='line'>              <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span>
</span><span class='line'>                     <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="kd">static</span> <span class="kt">int</span> <span class="nf">nextInt</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span> <span class="n">next</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">static</span> <span class="kt">double</span> <span class="nf">nextDouble</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Double</span><span class="o">.</span><span class="na">parseDouble</span><span class="o">(</span> <span class="n">next</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>参考资料</h4>

<ul>
<li><a href="http://www.cpe.ku.ac.th/~jim/java-io.html">http://www.cpe.ku.ac.th/~jim/java-io.html</a></li>
<li><a href="http://stackoverflow.com/questions/2446805/is-java-util-scanner-that-slow">http://stackoverflow.com/questions/2446805/is-java-util-scanner-that-slow</a></li>
<li><a href="http://spc10.contest.scrool.se/doc/javaio">http://spc10.contest.scrool.se/doc/javaio</a></li>
<li><a href="http://www.javamex.com/tutorials/regular_expressions/splitting_tokenisation_performance.shtml">http://www.javamex.com/tutorials/regular_expressions/splitting_tokenisation_performance.shtml</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress自定义修改记录]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/06/octopress-custom-modifications/"/>
    <updated>2014-04-06T16:46:35+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/06/octopress-custom-modifications</id>
    <content type="html"><![CDATA[<p>按照<a href="http://octopress.org/docs/">官方教程</a>部署好Octopress后，如果想要支持中文blog的书写，需要修改以下几个地方：</p>

<h3>环境变量</h3>

<p>如果在Windows操作系统下，需要添加两个环境变量：</p>

<ul>
<li>LANG = zh_CN.UTF-8</li>
<li>LC_ALL = zh_CN.UTF-8</li>
</ul>


<h3>Jekyll</h3>

<p>修改<code>{ruby_home}\lib\ruby\gems\1.9.1\gems\jekyll-0.12.0\lib\jekyll\convertible.rb</code>，强制使用UTF-8格式：</p>

<div><script src='https://gist.github.com/e7b7d3cee4bcfe85dcc7.js?file=convertible.rb.diff'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>@@ -25,7 +25,7 @@ def to_s
     #
     # Returns nothing.
     def read_yaml(base, name)
-      self.content = File.read(File.join(base, name))
+      self.content = File.read(File.join(base, name), :encoding =&gt; 'utf-8')
 
       begin
         if self.content =~ /\A(---\s*\n.*?\n?)^(---\s*$\n?)/m</code></pre></noscript></div>


<p>其他的一些修改：</p>

<h3>提交时间</h3>

<p>运行<code>rake deploy</code>时，在Rakefile中可以找到默认的提交信息是「Site updated at #{Time.now.utc}」，这里的时间是UTC时间，将<code>Time.now.utc</code>改成<code>Time.now</code>就可以使用本地的时间了。</p>

<div><script src='https://gist.github.com/e7b7d3cee4bcfe85dcc7.js?file=Rakefile.diff'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>@@ -261,8 +261,8 @@ multitask :push do
    cp_r &quot;#{public_dir}/.&quot;, deploy_dir
    cd &quot;#{deploy_dir}&quot; do
      system &quot;git add -A&quot;
 -    puts &quot;\n## Committing: Site updated at #{Time.now.utc}&quot;
 -    message = &quot;Site updated at #{Time.now.utc}&quot;
 +    puts &quot;\n## Committing: Site updated at #{Time.now}&quot;
 +    message = &quot;Site updated at #{Time.now}&quot;
      system &quot;git commit -m \&quot;#{message}\&quot;&quot;
      puts &quot;\n## Pushing generated #{deploy_dir} website&quot;
      system &quot;git push origin #{deploy_branch}&quot;</code></pre></noscript></div>


<h3>JiaThis插件</h3>

<p>添加JiaThis分享插件后，会发现在分享工具条左下角出现一个小白框，遮挡住了「分享至」里的「分」字，影响视觉效果。Google了一下发现了解决方案：</p>

<p>修改<code>octopress\source\javascripts\octopress.js</code>：</p>

<div><script src='https://gist.github.com/e7b7d3cee4bcfe85dcc7.js?file=octopress.js.diff'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>@@ -94,7 +94,9 @@ function flashVideoFallback(){
  function wrapFlashVideos() {
    $('object').each(function(i, object) {
      if( $(object).find('param[name=movie]').length ){
 -      $(object).wrap('&lt;div class=&quot;flash-video&quot;&gt;')
 +      if ($(object).attr('id') != &quot;JIATHISSWF&quot;) {
 +          $(object).wrap('&lt;div class=&quot;flash-video&quot;&gt;')
 +      }
      }
    });
    $('iframe[src*=vimeo],iframe[src*=youtube]').wrap('&lt;div class=&quot;flash-video&quot;&gt;')</code></pre></noscript></div>


<p>解决方案源地址：<a href="http://geeksavetheworld.com/blog/2012/11/05/add-jiathis-to-octopress-blog/">http://geeksavetheworld.com/blog/2012/11/05/add-jiathis-to-octopress-blog/</a></p>

<h3>列表缩进样式</h3>

<p>默认的css样式文件中，markdown的列表是没有进行缩进处理的，看着比较别扭。找到<code>octopress\sass\custom\_layout.scss</code>，去掉<code>//$indented-lists: true;</code>这一行的注释符号，重新<code>rake generate</code>就可以了。</p>

<div><script src='https://gist.github.com/e7b7d3cee4bcfe85dcc7.js?file=_layout.scss.diff'></script>
<script type="text/javascript">$(".gist-file table tr td.line-numbers").remove();</script>
<noscript><pre><code>@@ -6,7 +6,7 @@
  //$header-padding-bottom: 1.5em;
  
  //$max-width: 1350px;
- //$indented-lists: true;
+ $indented-lists: true;
  
  // Padding used for layout margins
  //$pad-min: 18px;</code></pre></noscript></div>


<h3>Gist tag</h3>

<p>修复Gist tag的样式。参见：<a href="http://devspade.com/blog/2013/08/06/fixing-gist-embeds-in-octopress/">http://devspade.com/blog/2013/08/06/fixing-gist-embeds-in-octopress/</a></p>

<h3>Codeblock插件</h3>

<p>现在<a href="https://github.com/imathis/octopress">官方Github</a>的master分支下为Octopress2.0版本，暂不支持Codeblock插件中的start, mark, linenos选项，可以参考这两个临时解决方法：</p>

<ul>
<li><a href="https://github.com/imathis/octopress/issues/1472">https://github.com/imathis/octopress/issues/1472</a></li>
<li><a href="https://github.com/imathis/octopress/pull/1485">https://github.com/imathis/octopress/pull/1485</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(10): Annotations]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/06/java-8-annotations/"/>
    <updated>2014-04-06T16:10:57+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/06/java-8-annotations</id>
    <content type="html"><![CDATA[<h3>Annotations</h3>

<p>Java 8 中 annotations 是可重复的。我们通过下面这里例子来看一下。</p>

<p>首先，我们定义一个包装器annotation，其中存放着真正的annotations的数组：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@interface</span> <span class="n">Hints</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Hint</span><span class="o">[]</span> <span class="nf">value</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Repeatable</span><span class="o">(</span><span class="n">Hints</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@interface</span> <span class="n">Hint</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="nf">value</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java 8 中我们可以使用添加<code>@Repeatable</code>来使用多个同种类型的注解。</p>

<p>变体1：使用容器annotation（过去的方法）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Hints</span><span class="o">({</span><span class="nd">@Hint</span><span class="o">(</span><span class="s">&quot;hint1&quot;</span><span class="o">),</span> <span class="nd">@Hint</span><span class="o">(</span><span class="s">&quot;hint2&quot;</span><span class="o">)})</span>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>变体2：使用可重复的annotations（新式方法）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@Hint</span><span class="o">(</span><span class="s">&quot;hint1&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Hint</span><span class="o">(</span><span class="s">&quot;hint2&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用变体2时，java编译器隐式的使用了<code>@Hints</code>注解。这在通过反射获取注解信息时显得尤为重要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Hint</span> <span class="n">hint</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">Hint</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hint</span><span class="o">);</span>                   <span class="c1">// null</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Hints</span> <span class="n">hints1</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">Hints</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hints1</span><span class="o">.</span><span class="na">value</span><span class="o">().</span><span class="na">length</span><span class="o">);</span>  <span class="c1">// 2</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Hint</span><span class="o">[]</span> <span class="n">hints2</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getAnnotationsByType</span><span class="o">(</span><span class="n">Hint</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hints2</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>          <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>尽管我们在<code>Person</code>类上从未声明过<code>@Hints</code>，但是仍然可以通过<code>getAnnotation(Hints.class)</code>访问到它。然而，还有一个更方便的方法<code>getAnnotationsByType</code>，通过它能直接获取到所有标注为<code>@Hint</code>的注解。</p>

<p>另外，Java 8 中的annotations还扩展了两个新的target：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> 
</span><span class='line'>  <span class="nd">@Target</span><span class="o">({</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE_PARAMETER</span><span class="o">,</span> <span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE_USE</span><span class="o">})</span>
</span><span class='line'>  <span class="nd">@interface</span> <span class="n">MyAnnotation</span> <span class="o">{}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(9): Date API]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/06/java-8-date-api/"/>
    <updated>2014-04-06T00:42:44+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/06/java-8-date-api</id>
    <content type="html"><![CDATA[<h3>Date API</h3>

<p>在Java 8的java.time包中包含了一组全新的date和time相关的API。新的Date API与Joda-Time库很类似，但是并不完全一样。在下面的示例中将看到新API中的最重要的部分是如何使用的。</p>

<h4>Clock</h4>

<p><code>Clock</code>用来获取当前的date和time。<code>Clock</code>可以区分不同时区，也可以用来代替<code>System.currentTimeMillis()</code>来获取当前的毫秒数。作为一个时间线上的一点，当前的毫秒数也可以使用<code>Instant</code>类来表示。<code>Instant</code>可以被用来创建遗留的<code>java.util.Date</code>对象。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Clock</span> <span class="n">clock</span> <span class="o">=</span> <span class="n">Clock</span><span class="o">.</span><span class="na">systemDefaultZone</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">millis</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="na">millis</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Instant</span> <span class="n">instant</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="na">instant</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Date</span> <span class="n">legacyDate</span> <span class="o">=</span> <span class="n">Date</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">instant</span><span class="o">);</span>   <span class="c1">// legacy java.util.Date</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Timezones</h4>

<p>时区使用一个<code>ZoneId</code>对象来表示，可以使用<code>ZoneId</code>的静态工厂方法很方便的获取一个时区对象。时区实际上就是定义了一个偏移量，这个偏移量在进行instant与本地的date、time进行转换时很重要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ZoneId</span><span class="o">.</span><span class="na">getAvailableZoneIds</span><span class="o">());</span>
</span><span class='line'>  <span class="c1">// prints all available timezone ids</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">ZoneId</span> <span class="n">zone1</span> <span class="o">=</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;Europe/Berlin&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ZoneId</span> <span class="n">zone2</span> <span class="o">=</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;Brazil/East&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zone1</span><span class="o">.</span><span class="na">getRules</span><span class="o">());</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zone2</span><span class="o">.</span><span class="na">getRules</span><span class="o">());</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// ZoneRules[currentStandardOffset=+01:00]</span>
</span><span class='line'>  <span class="c1">// ZoneRules[currentStandardOffset=-03:00]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>LocalTime</h4>

<p><code>LocalTime</code>表示一个无时区的时间，例如 10pm 或者 17:30:15。下面的例子中分别为上面定义的两个timezone创建了一个localtime，然后对两个时间进行比较，并计算小时和分钟的差值。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">LocalTime</span> <span class="n">now1</span> <span class="o">=</span> <span class="n">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="n">zone1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">LocalTime</span> <span class="n">now2</span> <span class="o">=</span> <span class="n">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="n">zone2</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">now1</span><span class="o">.</span><span class="na">isBefore</span><span class="o">(</span><span class="n">now2</span><span class="o">));</span>  <span class="c1">// false</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">long</span> <span class="n">hoursBetween</span> <span class="o">=</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">HOURS</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="n">now1</span><span class="o">,</span> <span class="n">now2</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">minutesBetween</span> <span class="o">=</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="n">now1</span><span class="o">,</span> <span class="n">now2</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hoursBetween</span><span class="o">);</span>       <span class="c1">// -3</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">minutesBetween</span><span class="o">);</span>     <span class="c1">// -239</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>LocalTime</code>自带了各种工厂方法来简化实例的创建，其中就包括解析时间字符串。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">LocalTime</span> <span class="n">late</span> <span class="o">=</span> <span class="n">LocalTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">23</span><span class="o">,</span> <span class="mi">59</span><span class="o">,</span> <span class="mi">59</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">late</span><span class="o">);</span>       <span class="c1">// 23:59:59</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">DateTimeFormatter</span> <span class="n">germanFormatter</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">DateTimeFormatter</span>
</span><span class='line'>          <span class="o">.</span><span class="na">ofLocalizedTime</span><span class="o">(</span><span class="n">FormatStyle</span><span class="o">.</span><span class="na">SHORT</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">withLocale</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">GERMAN</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">LocalTime</span> <span class="n">leetTime</span> <span class="o">=</span> <span class="n">LocalTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;13:37&quot;</span><span class="o">,</span> <span class="n">germanFormatter</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">leetTime</span><span class="o">);</span>   <span class="c1">// 13:37</span>
</span></code></pre></td></tr></table></div></figure>


<h4>LocalDate</h4>

<p><code>LocalDate</code>表示一个明确的日期。它是不可变的，工作方式与<code>LocalTime</code>类似。下面的例子演示了如何通过加/减天数、月数、年数来计算新的日期。需要注意的是每次操作返回的都是一个新的实例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">LocalDate</span> <span class="n">today</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'>  <span class="n">LocalDate</span> <span class="n">tomorrow</span> <span class="o">=</span> <span class="n">today</span><span class="o">.</span><span class="na">plus</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">DAYS</span><span class="o">);</span>
</span><span class='line'>  <span class="n">LocalDate</span> <span class="n">yesterday</span> <span class="o">=</span> <span class="n">tomorrow</span><span class="o">.</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">LocalDate</span> <span class="n">independenceDay</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">JULY</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>  <span class="n">DayOfWeek</span> <span class="n">dayOfWeek</span> <span class="o">=</span> <span class="n">independenceDay</span><span class="o">.</span><span class="na">getDayOfWeek</span><span class="o">();</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dayOfWeek</span><span class="o">);</span>    <span class="c1">// FRIDAY</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样可以将字符串解析成一个LocalDate对象：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">DateTimeFormatter</span> <span class="n">germanFormatter</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">DateTimeFormatter</span>
</span><span class='line'>          <span class="o">.</span><span class="na">ofLocalizedDate</span><span class="o">(</span><span class="n">FormatStyle</span><span class="o">.</span><span class="na">MEDIUM</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">withLocale</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">GERMAN</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">LocalDate</span> <span class="n">xmas</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;24.12.2014&quot;</span><span class="o">,</span> <span class="n">germanFormatter</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">xmas</span><span class="o">);</span>   <span class="c1">// 2014-12-24</span>
</span></code></pre></td></tr></table></div></figure>


<h4>LocalDateTime</h4>

<p><code>LocalDateTime</code>表示一个date-time。它将date和time放到一个对象中。<code>LocalDateTime</code>是不可变的，工作方式和<code>LocalTime</code>,<code>LocalDate</code>也类似。我们可以利用方法来获取date-time中的各个字段：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">LocalDateTime</span> <span class="n">sylvester</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">DECEMBER</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">59</span><span class="o">,</span> <span class="mi">59</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">DayOfWeek</span> <span class="n">dayOfWeek</span> <span class="o">=</span> <span class="n">sylvester</span><span class="o">.</span><span class="na">getDayOfWeek</span><span class="o">();</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dayOfWeek</span><span class="o">);</span>      <span class="c1">// WEDNESDAY</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Month</span> <span class="n">month</span> <span class="o">=</span> <span class="n">sylvester</span><span class="o">.</span><span class="na">getMonth</span><span class="o">();</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">month</span><span class="o">);</span>          <span class="c1">// DECEMBER</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">long</span> <span class="n">minuteOfDay</span> <span class="o">=</span> <span class="n">sylvester</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="n">ChronoField</span><span class="o">.</span><span class="na">MINUTE_OF_DAY</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">minuteOfDay</span><span class="o">);</span>    <span class="c1">// 1439</span>
</span></code></pre></td></tr></table></div></figure>


<p>给定一个时区信息的话可以将它转换成一个instant对象。然后可以将<code>Instant</code>对象转换成遗留的时间对象<code>java.util.Date</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Instant</span> <span class="n">instant</span> <span class="o">=</span> <span class="n">sylvester</span>
</span><span class='line'>          <span class="o">.</span><span class="na">atZone</span><span class="o">(</span><span class="n">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">())</span>
</span><span class='line'>          <span class="o">.</span><span class="na">toInstant</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Date</span> <span class="n">legacyDate</span> <span class="o">=</span> <span class="n">Date</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">instant</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">legacyDate</span><span class="o">);</span>     <span class="c1">// Wed Dec 31 23:59:59 CET 2014</span>
</span></code></pre></td></tr></table></div></figure>


<p>date-time的格式化与date、time的格式化类似。除了使用预定义的格式之外，我们还可以使用自定义的pattern创建新的formatter对象：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">DateTimeFormatter</span> <span class="n">formatter</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">DateTimeFormatter</span>
</span><span class='line'>          <span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&quot;MMM dd, yyyy - HH:mm&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">LocalDateTime</span> <span class="n">parsed</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;Nov 03, 2014 - 07:13&quot;</span><span class="o">,</span> <span class="n">formatter</span><span class="o">);</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">formatter</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">parsed</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">string</span><span class="o">);</span>     <span class="c1">// Nov 03, 2014 - 07:13</span>
</span></code></pre></td></tr></table></div></figure>


<p>与<code>java.text.NumberFormat</code>不同的是，新创建的<code>DateTimeFormatter</code>对象是不可更改并且线程安全的。</p>

<p>关于pattern语法的详细信息参看<a href="http://download.java.net/jdk8/docs/api/java/time/format/DateTimeFormatter.html">官方文档</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(8): Map]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/04/java-8-map/"/>
    <updated>2014-04-04T17:03:54+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/04/java-8-map</id>
    <content type="html"><![CDATA[<h3>Map</h3>

<p>虽然map是不支持stream的。但是Java 8中为map增加了多种很有用的方法，方便我们执行各种针对map的常见任务。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">map</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="s">&quot;val&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">id</span><span class="o">,</span> <span class="n">val</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">val</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码很简明：<code>putIfAbsent</code>方法使我们不用再写额外的if null检查语句了；<code>forEach</code>方法接受一个「消费者」，对map中的每一个值执行相应操作。</p>

<p>下面的例子展示了如何使用函数来对指定的value进行计算：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">map</span><span class="o">.</span><span class="na">computeIfPresent</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">val</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">val</span> <span class="o">+</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>             <span class="c1">// val33</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">computeIfPresent</span><span class="o">(</span><span class="mi">9</span><span class="o">,</span> <span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">val</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span>     <span class="c1">// false</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="mi">23</span><span class="o">,</span> <span class="n">num</span> <span class="o">-&gt;</span> <span class="s">&quot;val&quot;</span> <span class="o">+</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="mi">23</span><span class="o">);</span>    <span class="c1">// true</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">num</span> <span class="o">-&gt;</span> <span class="s">&quot;bam&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>             <span class="c1">// val33</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面来看一下如何移除完全匹配给定的key/value的entries：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> 
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;val3&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>             <span class="c1">// val33</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&quot;val33&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>             <span class="c1">// null</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外一个很有用的方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> 
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="mi">42</span><span class="o">,</span> <span class="s">&quot;not found&quot;</span><span class="o">);</span>  <span class="c1">// not found</span>
</span></code></pre></td></tr></table></div></figure>


<p>进行entries的合并也非常简单：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> 
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="mi">9</span><span class="o">,</span> <span class="s">&quot;val9&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">newValue</span><span class="o">));</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span>             <span class="c1">// val9</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="mi">9</span><span class="o">,</span> <span class="s">&quot;concat&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">value</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">newValue</span><span class="o">));</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span>             <span class="c1">// val9concat</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>merge</code>方法在给定的key不存在时，将key/value添加进map中，否则对现有的value进行修改。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(7): Streams]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/04/java-8-streams/"/>
    <updated>2014-04-04T09:43:47+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/04/java-8-streams</id>
    <content type="html"><![CDATA[<h3>Streams</h3>

<p><code>java.util.Stream</code>表示一个多元素的数组，在上面可以进行一项或者多项操作。Stream操作分为两种，一种是intermediate操作，一种是terminal操作。terminal操作返回的是某一特定类型的结果，而intermediate操作返回的stream对象本身，这样以来我们就可以在一行中将多个方法链接起来。Streams创建的时候必须指定一个source，例如<code>java.util.Collection</code>中的lists或者sets（maps是不被支持的）。Streams操作既可以是串行的也可以是并行的。</p>

<p>首先来看一个串行执行streams操作的例子，这个例子中的source是一个string数组：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>  <span class="n">stringCollection</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;ddd2&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">stringCollection</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;aaa2&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">stringCollection</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bbb1&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">stringCollection</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;aaa1&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">stringCollection</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bbb3&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">stringCollection</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;ccc&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">stringCollection</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bbb2&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">stringCollection</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;ddd1&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java 8对<code>Collections</code>进行了扩展，我们可以直接调用<code>Collection.stream()</code>或者<code>Collection.parallelStream()</code>来创建stream。下面是一些常见的stream操作。</p>

<h4>Filter</h4>

<p>Filter接受一个判断条件并对stream中的所有元素进行过滤操作。这是一个intermediate操作，我们可以在它的返回结果上继续调用其他的stream操作（比如这里的forEach）。ForEach接受一个「消费者」，这个「消费者」对经过过滤后的stream中的每一个元素进行「消费」。ForEach是一个terminal操作。它的返回值是void，所以我们无法再继续调用其他操作了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">stringCollection</span>
</span><span class='line'>      <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">filter</span><span class="o">((</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// &quot;aaa2&quot;, &quot;aaa1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Sorted</h4>

<p>Sorted是一个intermediate操作，它返回经过排序后的stream。默认的排序是按照自然顺序，想要实现自定义的比较方式需要向sorted方法传递一个自定义的Comparator。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">stringCollection</span>
</span><span class='line'>      <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">sorted</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">filter</span><span class="o">((</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// &quot;aaa1&quot;, &quot;aaa2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，sorted仅创建了当前stream经过排序后的一个视图，而没有真正修改后方的collection。<code>stringCollection</code>中的顺序依然保持不变：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stringCollection</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Map</h4>

<p>map也是一个intermediate操作，它使用给定的函数将每个元素转换成另一个对象。下面的例子中将每一个字符串进行了upper操作。另外，也可以使用map将对象转换成另一种类型。得到的stream的泛型取决于传递给map的函数的返回值类型。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">stringCollection</span>
</span><span class='line'>      <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">toUpperCase</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">sorted</span><span class="o">((</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Match</h4>

<p>各式各样的匹配操作可以用来检查一个特定的谓词表达式是否与stream相匹配。所有的匹配操作都是terminal类型的，并且返回的是boolean类型的结果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">boolean</span> <span class="n">anyStartsWithA</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">stringCollection</span>
</span><span class='line'>          <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>          <span class="o">.</span><span class="na">anyMatch</span><span class="o">((</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">anyStartsWithA</span><span class="o">);</span>      <span class="c1">// true</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">allStartsWithA</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">stringCollection</span>
</span><span class='line'>          <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>          <span class="o">.</span><span class="na">allMatch</span><span class="o">((</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">allStartsWithA</span><span class="o">);</span>      <span class="c1">// false</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">noneStartsWithZ</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">stringCollection</span>
</span><span class='line'>          <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>          <span class="o">.</span><span class="na">noneMatch</span><span class="o">((</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;z&quot;</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">noneStartsWithZ</span><span class="o">);</span>      <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Count</h4>

<p>count是一个terminal操作，它以long类型返回stream中元素的个数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">long</span> <span class="n">startsWithB</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">stringCollection</span>
</span><span class='line'>          <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>          <span class="o">.</span><span class="na">filter</span><span class="o">((</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">))</span>
</span><span class='line'>          <span class="o">.</span><span class="na">count</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">startsWithB</span><span class="o">);</span>    <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Reduce</h4>

<p>reduce是一个terminal操作，它使用给定的函数对stream中的元素进行reduction操作。返回的是一个Optional对象，其中存放着reduce之后的值。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">reduced</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">stringCollection</span>
</span><span class='line'>          <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>          <span class="o">.</span><span class="na">sorted</span><span class="o">()</span>
</span><span class='line'>          <span class="o">.</span><span class="na">reduce</span><span class="o">((</span><span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s1</span> <span class="o">+</span> <span class="s">&quot;#&quot;</span> <span class="o">+</span> <span class="n">s2</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">reduced</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Parallel Streams</h3>

<p>上面提到了streams分为串行和并行两类。串行streams中的操作都是在一个线程中执行的，而并行sterams上的操作是在多个线程中并发执行的。</p>

<p>下面的例子向我们展示了使用并行streams来提升性能是如此的简单。</p>

<p>首先创建一个没有重复元素的大数组。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">1000000</span><span class="o">;</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">max</span><span class="o">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">max</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">UUID</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">();</span>
</span><span class='line'>      <span class="n">values</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">uuid</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来我们来测一下对这个数组的stream进行排序所消耗的时间。</p>

<h4>串行排序</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">long</span> <span class="n">t0</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">sorted</span><span class="o">().</span><span class="na">count</span><span class="o">();</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">long</span> <span class="n">t1</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">long</span> <span class="n">millis</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">NANOSECONDS</span><span class="o">.</span><span class="na">toMillis</span><span class="o">(</span><span class="n">t1</span> <span class="o">-</span> <span class="n">t0</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;sequential sort took: %d ms&quot;</span><span class="o">,</span> <span class="n">millis</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// sequential sort took: 899 ms</span>
</span></code></pre></td></tr></table></div></figure>


<h4>并行排序</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">long</span> <span class="n">t0</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">sorted</span><span class="o">().</span><span class="na">count</span><span class="o">();</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">long</span> <span class="n">t1</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">long</span> <span class="n">millis</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">NANOSECONDS</span><span class="o">.</span><span class="na">toMillis</span><span class="o">(</span><span class="n">t1</span> <span class="o">-</span> <span class="n">t0</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;parallel sort took: %d ms&quot;</span><span class="o">,</span> <span class="n">millis</span><span class="o">));</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// parallel sort took: 472 ms</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到两段代码基本完全相同，但是并行排序并串行排序快了大约50%。差别仅是把<code>stream()</code>替换成了<code>parallelStream()</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(6): Built-in Functional Interfaces]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/03/java-8-built-in-functional-interface/"/>
    <updated>2014-04-03T20:06:22+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/03/java-8-built-in-functional-interface</id>
    <content type="html"><![CDATA[<h3>内置的函数式接口</h3>

<p>JDK 1.8 的API中包含很多内置的函数式接口。它们中有些从旧版本就开始被人们所熟知，如<code>Comparator</code>，<code>Runnable</code>。这些现存的接口通过添加<code>@FunctionalInterface</code>注解进行扩展，以提供对lambda的支持。</p>

<p>Java 8的API同样拥有大量的函数式接口。许多接口都来自著名的Google Guava library。就算你对这个库不熟悉，你也应该去研究研究这些接口是如何进行的方法扩展。</p>

<h4>Predicates</h4>

<p>Predicates是一些接受一个参数并返回boolean类型值的函数。这个接口包含各种用来组成复杂的逻辑术语的谓词的默认方法（and，or，negate）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">predicate</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>              <span class="c1">// true</span>
</span><span class='line'>  <span class="n">predicate</span><span class="o">.</span><span class="na">negate</span><span class="o">().</span><span class="na">test</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>     <span class="c1">// false</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">nonNull</span> <span class="o">=</span> <span class="nl">Objects:</span><span class="o">:</span><span class="n">nonNull</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">isNull</span> <span class="o">=</span> <span class="nl">Objects:</span><span class="o">:</span><span class="n">isNull</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">isEmpty</span> <span class="o">=</span> <span class="nl">String:</span><span class="o">:</span><span class="n">isEmpty</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">isNotEmpty</span> <span class="o">=</span> <span class="n">isEmpty</span><span class="o">.</span><span class="na">negate</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Functions</h4>

<p>Functions接受一个参数，并产生一个结果。默认方法可以用来将多个Functions链接到一起（compose，andThen）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">toInteger</span> <span class="o">=</span> <span class="nl">Integer:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">backToString</span> <span class="o">=</span> <span class="n">toInteger</span><span class="o">.</span><span class="na">andThen</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">backToString</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">);</span>     <span class="c1">// &quot;123&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Suppliers</h4>

<p>Suppliers产生一个给定的泛型结果。与Functions不同的是，Suppliers不接受任何参数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personSupplier</span> <span class="o">=</span> <span class="nl">Person:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>
</span><span class='line'>  <span class="n">personSupplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>   <span class="c1">// new Person</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Consumers</h4>

<p>Consumers表示在一个输入参数上进行的操作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">greeter</span> <span class="o">=</span> <span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="n">p</span><span class="o">.</span><span class="na">firstName</span><span class="o">);</span>
</span><span class='line'>  <span class="n">greeter</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Luke&quot;</span><span class="o">,</span> <span class="s">&quot;Skywalker&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Comparators</h4>

<p>Comparators在旧版本中就很有名了。Java 8又向这个接口中添加了许多默认方法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">comparator</span> <span class="o">=</span> <span class="o">(</span><span class="n">p1</span><span class="o">,</span> <span class="n">p2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">p1</span><span class="o">.</span><span class="na">firstName</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p2</span><span class="o">.</span><span class="na">firstName</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Person</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;Doe&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="s">&quot;Alice&quot;</span><span class="o">,</span> <span class="s">&quot;Wonderland&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">comparator</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">p1</span><span class="o">,</span> <span class="n">p2</span><span class="o">);</span>             <span class="c1">// &gt; 0</span>
</span><span class='line'>  <span class="n">comparator</span><span class="o">.</span><span class="na">reversed</span><span class="o">().</span><span class="na">compare</span><span class="o">(</span><span class="n">p1</span><span class="o">,</span> <span class="n">p2</span><span class="o">);</span>  <span class="c1">// &lt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Optionals</h4>

<p>Optionals不是函数式接口, 而是一个用来防止<code>NullPointerException</code>的小工具。Optional是下一节中的重要概念，这里我们先大体看一下它是如何工作的。</p>

<p>Optional是一个值的简单容器，这个值可以为null，也可以不为null。想象有一个可以返回非null的结果但有时什么都不返回的方法。在Java 8中你可以返回一个Optional而不返回null。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">optional</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;bam&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">optional</span><span class="o">.</span><span class="na">isPresent</span><span class="o">();</span>           <span class="c1">// true</span>
</span><span class='line'>  <span class="n">optional</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>                 <span class="c1">// &quot;bam&quot;</span>
</span><span class='line'>  <span class="n">optional</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">&quot;fallback&quot;</span><span class="o">);</span>    <span class="c1">// &quot;bam&quot;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">optional</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">((</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)));</span>     <span class="c1">// &quot;b&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(5): Lambda Scope]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/03/java-8-lambda-scope/"/>
    <updated>2014-04-03T17:21:13+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/03/java-8-lambda-scope</id>
    <content type="html"><![CDATA[<h3>Lambda的作用域</h3>

<p>在lambda表达式中访问外部变量的方式与匿名对象相似。从lambda表达式中可以访问外部作用域中的final局部变量，外部对象的成员字段和静态变量。</p>

<h4>访问局部变量</h4>

<p>从lambda表达式中访问外部的final局部变量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">final</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Converter</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">stringConverter</span> <span class="o">=</span>
</span><span class='line'>          <span class="o">(</span><span class="n">from</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">from</span> <span class="o">+</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">stringConverter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>     <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是与匿名对象不同的是，<code>num</code>不必显式的声明为final变量。所以下面的代码也是正确的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Converter</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">stringConverter</span> <span class="o">=</span>
</span><span class='line'>          <span class="o">(</span><span class="n">from</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">from</span> <span class="o">+</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">stringConverter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>     <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是为了代码能成功编译，<code>num</code>必须隐含为final变量。像下面的代码就无法编译通过：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Converter</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">stringConverter</span> <span class="o">=</span>
</span><span class='line'>          <span class="o">(</span><span class="n">from</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">from</span> <span class="o">+</span> <span class="n">num</span><span class="o">);</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在lambda表达式里对<code>num</code>进行写操作也是被禁止的。</p>

<h4>访问字段和静态变量</h4>

<p>与访问局部变量时相反，在lambda表达式内我们可以对外部对象的成员字段和静态变量进行读写操作。这个特性在匿名对象中已经广为人知了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">class</span> <span class="nc">Lambda4</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">static</span> <span class="kt">int</span> <span class="n">outerStaticNum</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">outerNum</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>      <span class="kt">void</span> <span class="nf">testScopes</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Converter</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">stringConverter1</span> <span class="o">=</span> <span class="o">(</span><span class="n">from</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">outerNum</span> <span class="o">=</span> <span class="mi">23</span><span class="o">;</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">from</span><span class="o">);</span>
</span><span class='line'>          <span class="o">};</span>
</span><span class='line'>  
</span><span class='line'>          <span class="n">Converter</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">stringConverter2</span> <span class="o">=</span> <span class="o">(</span><span class="n">from</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">outerStaticNum</span> <span class="o">=</span> <span class="mi">72</span><span class="o">;</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">from</span><span class="o">);</span>
</span><span class='line'>          <span class="o">};</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>访问默认接口方法</h4>

<p>还记得教程(1)中的formula的例子吗？<code>Formula</code>接口定义了一个默认的方法<code>sqrt</code>，任何一个formula的实例都可以访问这个方法，包括匿名对象在内。但在lambda表达式中这个就不适用了。</p>

<p>在lambda表达式内是无法访问默认方法的。下面的代码无法通过编译：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Formula</span> <span class="n">formula</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">sqrt</span><span class="o">(</span> <span class="n">a</span> <span class="o">*</span> <span class="mi">100</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(4): Method and Constructor References]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/03/java-8-method-and-constructor-ref/"/>
    <updated>2014-04-03T16:46:42+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/03/java-8-method-and-constructor-ref</id>
    <content type="html"><![CDATA[<h3>方法和构造器的引用</h3>

<p>上个教程中的例子可以通过使用静态方法的引用来进一步简化：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Converter</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">converter</span> <span class="o">=</span> <span class="nl">Integer:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Integer</span> <span class="n">converted</span> <span class="o">=</span> <span class="n">converter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">converted</span><span class="o">);</span>   <span class="c1">// 123</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java 8 中可以使用<code>::</code>关键字来传递对方法或构造器的引用。上面的例子展示了如何引用一个静态方法。同样我们也可以引用对象中的方法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">class</span> <span class="nc">Something</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="nf">startsWith</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">Something</span> <span class="n">something</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Something</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Converter</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">converter</span> <span class="o">=</span> <span class="nl">something:</span><span class="o">:</span><span class="n">startsWith</span><span class="o">;</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">converted</span> <span class="o">=</span> <span class="n">converter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="s">&quot;Java&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">converted</span><span class="o">);</span>    <span class="c1">// &quot;J&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面来看如何使用<code>::</code>关键字来引用构造器。首先我们定义了一个拥有多个不同构造器的bean。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">Person</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">;</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来定义一个person类的工厂接口来创建person实例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">interface</span> <span class="nc">PersonFactory</span><span class="o">&lt;</span><span class="n">P</span> <span class="kd">extends</span> <span class="n">Person</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">P</span> <span class="nf">create</span><span class="o">(</span><span class="n">String</span> <span class="n">firstName</span><span class="o">,</span> <span class="n">String</span> <span class="n">lastName</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过使用构造器的引用我们就可以避免手动去实现上面的工厂接口，代码简洁了很多。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">PersonFactory</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">personFactory</span> <span class="o">=</span> <span class="nl">Person:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="n">personFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">&quot;Peter&quot;</span><span class="o">,</span> <span class="s">&quot;Parker&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用<code>Person::new</code>创建了一个对<code>Person</code>类的构造器的引用。Java编译器会通过匹配<code>PersonFactory.create</code>方法的签名自动选用合适的构造器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(3): Functional Interface]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/02/java-8-functional-interface/"/>
    <updated>2014-04-02T16:33:19+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/02/java-8-functional-interface</id>
    <content type="html"><![CDATA[<h3>函数式接口</h3>

<p>lambda表达式是如何符合Java的类型系统的呢？每个lambda表达式对应一个指定的函数式接口。所谓的<strong>函数式接口</strong>(functional interface)必须包含且仅包含一个抽象方法。每个lambada表达式都会与对应的函数式接口中的这个抽象方法进行匹配。而由于default方法不是抽象的，所以我们可以向函数式接口中随意添加default方法。</p>

<p>只要一个接口只含有一个抽象方法，我们就可以将它用作lambda表达式。我们可以使用<code>@FunctionalInterface</code>注解来确保我们的接口能够满足这一需求。当我们尝试向添加了此注解的接口中添加第二个抽象方法时，编译器会提示存在编译错误。</p>

<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="nd">@FunctionalInterface</span>
</span><span class='line'>  <span class="kd">interface</span> <span class="nc">Converter</span><span class="o">&lt;</span><span class="n">F</span><span class="o">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">T</span> <span class="nf">convert</span><span class="o">(</span><span class="n">F</span> <span class="n">from</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">Converter</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">converter</span> <span class="o">=</span> <span class="o">(</span><span class="n">from</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">from</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Integer</span> <span class="n">converted</span> <span class="o">=</span> <span class="n">converter</span><span class="o">.</span><span class="na">convert</span><span class="o">(</span><span class="s">&quot;123&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">converted</span><span class="o">);</span>    <span class="c1">// 123</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是去掉<code>@FucntionalInterface</code>注解后代码依然是正确有效的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(2): Lambda Expression]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/02/java-8-lambda-expression/"/>
    <updated>2014-04-02T15:34:54+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/02/java-8-lambda-expression</id>
    <content type="html"><![CDATA[<h3>Lambda 表达式</h3>

<p>先来看一个对字符串数组进行排序的例子，在之前的Java版本中，我们通常这样来实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;peter&quot;</span><span class="o">,</span> <span class="s">&quot;anna&quot;</span><span class="o">,</span> <span class="s">&quot;mike&quot;</span><span class="o">,</span> <span class="s">&quot;xenia&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">names</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">String</span> <span class="n">a</span><span class="o">,</span> <span class="n">String</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">b</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>静态方法<code>Collections.sort</code>接受一个数组和一个比较器来对这个数组进行排序。因而我们经常需要创建一个匿名的比较器并把它传递给<code>sort</code>方法。</p>

<p>为了避免整天没完没了的创建匿名对象，Java 8使用了一种更简洁的语法，lambda表达式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">names</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span> <span class="n">a</span><span class="o">,</span> <span class="n">String</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">b</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到代码比以前短了不少并且变得更加易读。但是它还能变得更短：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">names</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span> <span class="n">a</span><span class="o">,</span> <span class="n">String</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">a</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果方法中只有一行语句，可以省略大括号和<code>return</code>关键字。但是，这还没完：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">names</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">a</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java编译器会自动进行参数类型检查，所以这些我们也可以省略掉。接下来我们将更深入的讲解一下lambda表达式更广泛的用途。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(1): Default Method]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/01/java-8-default-method/"/>
    <updated>2014-04-01T23:56:29+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/01/java-8-default-method</id>
    <content type="html"><![CDATA[<h3>接口的默认方法</h3>

<p>Java 8 中我们可以利用 <code>default</code> 关键字来为接口添加非抽象方法。这个特性也被称为<strong>扩展方法</strong>。</p>

<p>例子如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">interface</span> <span class="nc">Formula</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">double</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">default</span> <span class="kt">double</span> <span class="nf">sqrt</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了<code>calculate</code>方法这个抽象方法之外，<code>Formula</code>接口还定义了一个默认方法<code>sqrt</code>，接口的实现类只需要实现抽象方法<code>calculate</code>，而默认方法<code>sqrt</code>是直接可以拿来用的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Formula</span> <span class="n">formula</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Formula</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">double</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">sqrt</span><span class="o">(</span><span class="n">a</span> <span class="o">*</span> <span class="mi">100</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">formula</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>     <span class="c1">// 100.0</span>
</span><span class='line'>  <span class="n">formula</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="mi">16</span><span class="o">);</span>           <span class="c1">// 4.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的<code>formula</code>对象使用匿名对象的方式实现了<code>Formula</code>接口。代码看起来比较啰嗦，用了6行代码实现了一个简单的计算<code>sqrt(a * 100)</code>。在后面的教程中，我们将会看到在Java 8 中如何使用更简单的方式来实现一个单方法对象。</p>
]]></content>
  </entry>
  
</feed>
