<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 数据库 | sOlOHsU's Blog<sup>&#946;</sup>]]></title>
  <link href="http://www.solohsu.com/blog/categories/shu-ju-ku/atom.xml" rel="self"/>
  <link href="http://www.solohsu.com/"/>
  <updated>2014-05-19T22:25:40+08:00</updated>
  <id>http://www.solohsu.com/</id>
  <author>
    <name><![CDATA[Solo Hsu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL锁表与解锁]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/20/mysql-lock-and-unlock-tables/"/>
    <updated>2014-04-20T20:14:04+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/20/mysql-lock-and-unlock-tables</id>
    <content type="html"><![CDATA[<h2>LOCK TABLES</h2>

<h3>锁表语法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">LOCK</span> <span class="n">TABLES</span>
</span><span class='line'>    <span class="n">tbl_name</span> <span class="p">[[</span><span class="k">AS</span><span class="p">]</span> <span class="k">alias</span><span class="p">]</span> <span class="n">lock_type</span>
</span><span class='line'>    <span class="p">[,</span> <span class="n">tbl_name</span> <span class="p">[[</span><span class="k">AS</span><span class="p">]</span> <span class="k">alias</span><span class="p">]</span> <span class="n">lock_type</span><span class="p">]</span> <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">lock_type</span><span class="p">:</span>
</span><span class='line'>    <span class="k">READ</span> <span class="p">[</span><span class="k">LOCAL</span><span class="p">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span><span class="n">LOW_PRIORITY</span><span class="p">]</span> <span class="k">WRITE</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>会话只能为自己获取、释放锁，不能为其他会话获取锁，也不能释放其他会话持有的锁。</p>

<p><code>LOCK TABLES</code>隐式的为当前会话获取表锁。表锁的对象可以是表也可以是视图。</p>

<p>获取视图锁时，<code>LOCK TABLES</code>命令会自动锁定所有与该视图相关的基本表。</p>

<p>使用<code>LOCK TABLES</code>显示的锁定一个表时，这个表的触发器中涉及到的表也会被隐式的锁定，锁的类型取决于触发器中对该表进行了何种操作。</p>

<p>表锁只是用来防止其他会话进行不恰当的操作，持有锁的会话，即使持有的仅仅是读锁，也可以进行诸如<code>DROP TABLE</code>之类的表级操作。而由于<code>TRUNCATE</code>操作不是事务安全的，所以在活动的事务或者持有表锁时尝试执行<code>TRUNCATE</code>操作时会报错。</p>

<p>另外，虽然可以对临时表执行锁表操作，但是实际上会被自动忽略掉，不执行任何操作。因为临时表只对当前会话（也就是创建它的会话）是可见的。</p>

<h3>锁的类型</h3>

<h4>READ [LOCAL]锁</h4>

<ul>
<li>持有读锁的会话可以读表，但是不能写表。</li>
<li>多个会话可以同时获得同一个表的读锁。</li>
<li>其他的会话不用获取该表的读锁也可以读取该表。</li>
<li><code>LOCAL</code>修饰符允许其他会话执行无冲突的插入语句。但是，如果是在服务器之外的进程上进行操作时，就不能使用<code>READ LOCAL</code>了。另外，对于使用InnoDB引擎的表来说，<code>READ LOCAL</code>与<code>READ</code>没有任何区别。</li>
</ul>


<h4>[LOW_PRIORITY] WRITE锁</h4>

<ul>
<li>持有写锁的会话可以读表也可以写表。</li>
<li>只有持有写锁的会话可以访问该表。写锁释放前其他会话都不能对该表进行访问。</li>
<li>表被写锁锁定时，其他会话对该表的锁定请求将会被阻塞。</li>
<li><code>LOW_PRIORITY</code>修饰符已被弃用（当前版本为5.7）。直接使用<code>WRITE</code>即可。</li>
</ul>


<p>锁表语句会一直阻塞直到获取到所有需要的锁。
需要对表进行锁定的会话必须一次性的获取到所有它需要锁，因为一旦锁表语句执行完成，该会话就只能访问被锁的表了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;mysql&amp;gt; LOCK TABLES t1 READ;
</span><span class='line'>mysql&amp;gt; SELECT COUNT<span class="o">(</span>*<span class="o">)</span> FROM t1;
</span><span class='line'>+----------+
</span><span class='line'>| COUNT<span class="o">(</span>*<span class="o">)</span> |
</span><span class='line'>+----------+
</span><span class='line'>|        3 |
</span><span class='line'>+----------+
</span><span class='line'>mysql&amp;gt; SELECT COUNT<span class="o">(</span>*<span class="o">)</span> FROM t2;
</span><span class='line'>ERROR 1100 <span class="o">(</span>HY000<span class="o">)</span>: Table <span class="s1">&#39;t2&#39;</span> was not locked with LOCK TABLES
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>INFORMATION_SCHEMA</code>数据库中的表是个例外。即使有会话对这些表进行了锁定，其他会话依然可以继续访问。</p>

<p>在一条查询语句中无法多次对锁定的表使用同一个名字进行引用。这种情况下可以使用表的别名，并且对每一个别也要加一个锁：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;mysql&amp;gt; LOCK TABLE t WRITE, t AS t1 READ;
</span><span class='line'>mysql&amp;gt; INSERT INTO t SELECT * FROM t;
</span><span class='line'>ERROR 1100: Table <span class="s1">&#39;t&#39;</span> was not locked with LOCK TABLES
</span><span class='line'>mysql&amp;gt; INSERT INTO t SELECT * FROM t AS t1;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>不对表的别名进行锁定的话，就无法使用别名对该表进行访问：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;mysql&amp;gt; LOCK TABLE t READ;
</span><span class='line'>mysql&amp;gt; SELECT * FROM t AS myalias;
</span><span class='line'>ERROR 1100: Table <span class="s1">&#39;myalias&#39;</span> was not locked with LOCK TABLES
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>相反，如果只对别名进行了锁定，则只能使用别名对其进行访问：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;mysql&amp;gt; LOCK TABLE t AS myalias READ;
</span><span class='line'>mysql&amp;gt; SELECT * FROM t;
</span><span class='line'>ERROR 1100: Table <span class="s1">&#39;t&#39;</span> was not locked with LOCK TABLES
</span><span class='line'>mysql&amp;gt; SELECT * FROM t AS myalias;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>写锁通常相对读锁有更高的优先级，以确保更新操作尽快得到处理。这就意味着如果同时有写锁和读锁两个请求，那么写锁会先得到响应。<code>LOCK TABLES</code>获取锁的过程如下：</p>

<ol>
<li>使用内部定义的顺序对所有将被加锁的表进行排序，这一步对于用户来说是透明的。</li>
<li>如果一个表同时有读锁和写锁两个请求，将写锁请求放到读锁请求之前。</li>
<li>每次锁定一个表直到当前会话获取到所有的需要的锁，并保证不会产生死锁。</li>
</ol>


<p>对分表进行锁定和解锁时，会锁定或者解锁整个表。</p>

<h2>UNLOCK TABLES</h2>

<h3>解锁语法</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UNLOCK</span> <span class="n">TABLES</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用<code>UNLOCK TABLES</code>将显示的释放掉由当前会话持有的所有表锁。</p>

<p><code>LOCK TABLES</code>会在获取新锁之前隐式的释放掉当前会话持有的所有表锁。</p>

<p>会话开始一个事务（例如使用<code>START TRANSACTION</code>）时，会隐式的执行<code>UNLOCK TABLES</code>。</p>

<p>无论会话正常退出或者异常终止，服务器都会隐式的释放掉该会话持有的所有锁。客户端重新连接后，这些锁不会再生效。另外，如果客户端断开时正在执行一个事务，服务器会自动回滚该事务，客户端重连后，新会话将会自动设置为自动提交模式。因此，最好禁用客户端的auto-reconnec。在启用自动重连的情况下，重连后客户端其实已经丢失了所有的锁和事务，但是不会被通知。而当禁用掉自动重连时，一旦连接断开，在一个将被执行的语句处会报错。这样一来客户端就可以检测到这个错误，并采取适当的措施，比如重新获取需要的锁，重新执行之前的事务。</p>

<p>在被锁定的表上执行<code>ALTER TABLE</code>语句后，将使该表变为未锁定状态。如果对该表再执行一条<code>ALTER TABLE</code>语句，就会报错：Table &lsquo;tbl_name&rsquo; was not locked with LOCK TABLES。这种情况下可以在执行完第一条<code>ALTER TABLE</code>后，重新对该表进行锁定。</p>

<p><code>UNLOCK TABLES</code>还可以用来释放之前通过<code>FLUSH TABLES WITH READ LOCK</code>获得的全局读锁。</p>
]]></content>
  </entry>
  
</feed>
