<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | sOlOHsU's Blog]]></title>
  <link href="http://www.solohsu.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.solohsu.com/"/>
  <updated>2014-06-18T01:17:17+08:00</updated>
  <id>http://www.solohsu.com/</id>
  <author>
    <name><![CDATA[Solo Hsu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[转]细节见真功之 Javadoc]]></title>
    <link href="http://www.solohsu.com/blog/2014/06/17/when-the-little-things-count-javadoc/"/>
    <updated>2014-06-17T22:32:40+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/06/17/when-the-little-things-count-javadoc</id>
    <content type="html"><![CDATA[<p>作为一个 Java 程序员，Javadoc 大家都应该写过吧，是不是觉得写的时候特简单呢？相信看完本文后你会若有所思。另外，本文非常适合处女座程序员阅读。</p>

<h3>句号</h3>

<p>为什么是句号而不是其他的标点符号呢？因为这涉及到一个 JDK 文档生成的规则：</p>

<blockquote><p>The first sentence of each doc comment should be a summary sentence, containing a concise but complete description of the API item. This means the first sentence of each member, class, interface or package description. （成员、类、接口或包注释的第一个句子将作为该注释项的总结，这个句子应该是言简意赅的）</p></blockquote>

<p>既然提到了句子，那就说明应该用标准的方式——句号来进行第一个句子的断句识别。也许是为了简洁，Javadoc 工具并没有“多语言句号识别”这个特性，所以不管我们用什么语言撰写文档注释，断句符号都必须是英文状态下的句号——.</p>

<p>比如在 NetBeans IDE 里（默认编辑器配置）可以很直观的看到用于总结的第一个句子和后面描述的区别：</p>

<p><img src="/images/first-sentence.png"></p>

<p>在生成 Javadoc 后，类概要页面我们可以看到最终的效果：</p>

<p><img src="/images/class-summary.png"></p>

<p>在使用中文撰写文档注释时，为了保持整体风格一致，在所有需要使用句号的地方有两种策略可选择：</p>

<ul>
<li>都使用英文句号：这样做可以让生成的文档句号统一，但缺点是看上去有点别扭</li>
<li>只有第一个句子使用英文句号，其余地方都是要中文句号：这样做后生成的文档看上去比较顺眼，但别人可能会奇怪为什么第一个句号是 .
当然，最彻底的解决方案是不用中文写文档注释，这样就不存在要统一的问题了！</li>
</ul>


<p>下面我们重点介绍各种你熟悉的或是不熟悉的 Javadoc 文档标记（它们很有内涵）</p>

<h3>@author</h3>

<p>该标记使用频率是所有文档标记中最高的，我想这是因为：</p>

<ul>
<li>做好事要留名</li>
<li>使用超简单，就像在填表格（姓名：           ）一样自然</li>
</ul>


<p>来看看大牛怎么写的：</p>

<p><img src="/images/commons-lang-stringutils.png"></p>

<p>（from Commons Lang 2.5 StringUtils）</p>

<p>总结下来有三种写法：</p>

<ul>
<li>纯文本</li>
<li>带邮箱链接</li>
<li>带 HTTP 链接</li>
</ul>


<p>（个人建议用 HTTP 链接：打码时可以顺便推广一下自己的博客，哈哈）</p>

<p>另外，在 JDK 代码中我们经常看到 @author unascribed，意思是：“该代码第一原作者不是我，但我实在也不知道是谁，就记作无名氏吧”（这是多么严肃的一种版权意识啊）</p>

<h3>@serialXXX</h3>

<p>这个系列应该是最不常用的文档标记了，它们到底是干嘛用的呢？请看<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#serial">这里</a>。</p>

<p>（我一次也没有使用过这些文档标记，看了官方文档后也还是没有搞懂怎么用，求各位指教）</p>

<h3>@value</h3>

<p>这个文档标记非常实用（不光好用），可以用于生成被标记的常量字段的值。</p>

<p>直接用于常量字段时：</p>

<p><img src="/images/value-code.png"></p>

<p><img src="/images/value-html.png"></p>

<p>也可以使用引用方式：</p>

<p><img src="/images/value-ref-code.png"></p>

<p><img src="/images/value-ref-html.png"></p>

<h3>{@inheritDoc}</h3>

<p>这个标签体现了 Java 面向对象的精辟所在：不但可以类可以集成，连文档都可以继承（足见 Java 在经典面向对象概念上的完备与圆润）。</p>

<p>比如有个计算面积的接口：</p>

<p><img src="/images/inheritdoc-interface-code.png"></p>

<p>它的实现方法标注了 {@inheritDoc}<em>（处女座阅读提示：无 .）</em>：</p>

<p><img src="/images/inheritdoc-impl-code.png"></p>

<p>最后生成的文档：</p>

<p><img src="/images/inheritdoc-html.png"></p>

<ul>
<li>基类的文档注释被继承到了子类</li>
<li>子类可以再加入自己的注释（特殊化扩展）</li>
<li>@return @param @throws 也会被继承</li>
</ul>


<p>其实在不写 {@inheritDoc} 的情况下也存在文档注释的继承，具体规则请看这里。</p>

<h3>{@link} {@linkplain}</h3>

<p>这两个链接标记大家用/见的应该比较多，但它们有什么区别、在什么场景下该怎么使用很少有人能够区分开（我猜你要用的时候一般也都是用 link 吧）。</p>

<p>看看官网的标准解释：</p>

<p><img src="/images/link.png"></p>

<p>link 和 linkplain 的实参都是 <strong><em>package.class#member label</em></strong> 。唯一的不同就是因为字体不同，如果 label 是个纯文本，那就使用 linkplain 吧。<em>（根据这点，我严重怀疑 Javadoc 文档标记的设计者是处女座，~ ~）</em></p>

<h3>pre</h3>

<p>没错，这就是那个 HTML 标签，用于显示“原始样子”的。这个标签在写 Javadoc 的时候非常有用，用或者不使用在打码的时候看上去差别不大：</p>

<p><img src="/images/pre-code.png"></p>

<p>但最终生成 apidocs 之后差别一目了然<em>（处女座阅读提示：在源码文档注释中特别需要注意 pre 后 { 的位置，紧跟 </em>，无空格）*：</p>

<p><img src="/images/pre-html.png"></p>

<h3>@since</h3>

<p>这个从字面的意思上很好理解，所以使用的比较多（如同 @author、@version 一样）。但问题是大家写的时候表达的意思五花八门，常见的有：</p>

<ol>
<li><p>想表达日期/时间
@since 2014-01-01
@since 2014-01-01 14:00:00</p></li>
<li><p>想表达可运行的 JDK 版本
@since JDK1.5</p></li>
<li><p>想表达加入这个元素的版本
@since 1.0.0</p></li>
</ol>


<p>根据官方文档解释，@since 表达的是被标记元素是哪个发布版本引入的（3）。比如别人在我们的文档注释中看到</p>

<p><img src="/images/since.png"></p>

<p>那他可以（应该）认为这个类是在该程序对外发布 1.0.0 版本时已经引入的。如果他要做二次开发，那他就可以很清晰的向后兼容了（我们在用 JDK 的时候就是这个场景）。</p>

<h3>@version</h3>

<p>提到了 @since 就自然会联想到 @version，因为它们的实参都是版本相关的。@version 要表达的是被标记元素自己的版本（注意对比 @since），也就是说这个版本只要代码改过就应该发生变化，而 @since 是不会变的。</p>

<p>官方文档也解释了怎么用好这个文档标记：通过 SCCS 字符 &ldquo;%I%, %G%"，例如 1.39, 02/28/97（文件版本号, 日期）生成。但实际上很少有项目这么做（至少目前 Oracle JDK 没这么做，甚至都没有使用 @version，或者是使用了但最后由于特殊原因总体移除了），大家一般都是 @version 1.0.0 然后就再也不修改了，不管被标记的元素改了多少次（这样的做法还不如不写）。</p>

<p>当然，通过版本控制系统 hook 来做是比较经典的做法，不过这样总感觉没有把这个标记的能力完全发挥出来。在我们的项目里是这样使用的：@version 1.2.3.4, Jun 9, 2014</p>

<p>重点是版本号部分，在这个例子中从左到右（1.2.3.4）分别表示：</p>

<ul>
<li>兼容性位 1，表示兼容性，如果 +1 了说明这个修改是不兼容的</li>
<li>特性位 2，表示已引入了两个特性，每次 +1 说明引入一个新特性</li>
<li>缺陷修复位 3，表示已经修复了 3 个缺陷，每次 +1 说明修复了一个缺陷</li>
<li>重构位 4，表示已经进行了 4 次重构，每次 +1 说明重构了一次</li>
<li>前面 3 位表达的意义和 Semantic Versioning 建议的一致，重构我觉得非常重要，所以也加了进来。</li>
</ul>


<h3>@exception @throws</h3>

<p>这两兄弟的情况比 @link @linkplain 更纠结（人家 link 兄弟最起码可以区分出来使用场景）。按照官方文档解释：它们完全是同义词，没有任何区分。那当年 Sun 在 JDK1.2 的时候为什么要加入 @throws 呢——答案是起名失误了，词性没弄匹配：@throws Exception 比 @exception Exception 更符合语法，代入感更好！（细节：<a href="http://stackoverflow.com/questions/5510170/in-javadoc-what-is-the-difference-between-the-tags-throws-and-exception">In javadoc, what is the difference between the tags @throws and @exception?</a>）</p>

<h3>标记总表</h3>

<p>来张 Javadoc 文档标记总表：</p>

<table summary="list of current javadoc tags" width="40%" border="0"> 
  <tbody> 
   <tr>
    <th><span style="font-size: x-small;">Tag</span></th>
    <th align="center"><span style="font-size: x-small;">Introduced in JDK/SDK</span></th>
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#author"><code>@author</code></a></td> 
    <td align="center">1.0</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#code"><code>{@code}</code></a></td> 
    <td align="center">1.5</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#docRoot"><code>{@docRoot}</code></a></td> 
    <td align="center">1.3</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#deprecated"><code>@deprecated</code></a></td> 
    <td align="center">1.0</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#exception"><code>@exception</code></a></td> 
    <td align="center">1.0</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#inheritDoc"><code>{@inheritDoc}</code></a></td> 
    <td align="center">1.4</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#link"><code>{@link}</code></a></td> 
    <td align="center">1.2</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#linkplain"><code>{@linkplain}</code></a></td> 
    <td align="center">1.4</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#literal"><code>{@literal}</code></a></td> 
    <td align="center">1.5</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#param"><code>@param</code></a></td> 
    <td align="center">1.0</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#return"><code>@return</code></a></td> 
    <td align="center">1.0</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#see"><code>@see</code></a></td> 
    <td align="center">1.0</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#serial"><code>@serial</code></a></td> 
    <td align="center">1.2</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#serialData"><code>@serialData</code></a></td> 
    <td align="center">1.2</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#serialField"><code>@serialField</code></a></td> 
    <td align="center">1.2</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#since"><code>@since</code></a></td> 
    <td align="center">1.1</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#throws"><code>@throws</code></a></td> 
    <td align="center">1.2</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#value"><code>{@value}</code></a></td> 
    <td align="center">1.4</td> 
   </tr> 
   <tr> 
    <td><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#version"><code>@version</code></a></td> 
    <td align="center">1.0</td> 
   </tr> 
  </tbody> 
 </table>


<p>这个表是 JDK7 技术手册里的，从中我们可以看出，自 JDK1.5 以后就没有加过新的文档标记了，目测有两个原因：</p>

<ul>
<li><p>Oracle：“这些已经足够开发人员使用了，没必要加新的了”</p></li>
<li><p>*Sun：“看吧，Oracle 严重缺乏折腾精神，当初不应该卖给它的”
文档标记介绍完了，下面我们来聊聊 Javadoc 相关的其他侃点。</p></li>
</ul>


<h3>getter/setter/isTrue</h3>

<p>对于 POJO 来说，这几个方法的注释格式非常固定，一般我们都是用 IDE 自动生成：这样的话别人一看到这样固定格式的注释（或者索性不要添加任何注释）就知道这部分相对于其他部分并不重要，
而一旦有的 getter/setter/isTrue 注释不是这样约定的，那就说明了实现上面不只是简单的 get/set/is，还加入了额外的逻辑处理。</p>

<h3>对齐</h3>

<p>Javadoc 文档注释也有对齐（不是前面 pre 例子那种），这里说的对齐主要指的是以源码视图看到的，最典型的场景就是在给方法添加文档注释的时候，我们经常看到两种风格：</p>

<p><img src="/images/align-para.png"></p>

<p>第一眼看上去是不是风格 2 要顺眼得多？但最好还是使用风格 1，因为：</p>

<ul>
<li>这和编辑器配置的字体有关，如果不是（适合的）等宽字体，那会非常的参差不齐</li>
<li>浪费空间，特别是当注释内容多了需要换行的时候会很别扭</li>
<li>最后生成的 apidocs 效果是一模一样的（无对齐）</li>
</ul>


<p>（一些 IDE 默认格式化文档注释的时候也是使用风格 1 进行格式化的，强烈建议使用风格 1）</p>

<h3>包注释</h3>

<p>和前面几点打码风格相关的细节比起来，包注释是具有一定的实用性的。虽然大家可能用得很少，但看得应该比较多，就是这部分：</p>

<p><img src="/images/package.png"></p>

<p>这里我们使用了两种方式来生成包文档：</p>

<ul>
<li>package.html：这是 JDK1.5 以前的方式，现在已经不推荐使用</li>
<li>package-info.java：目前推荐方式，因为这样可以使用注解</li>
</ul>


<p>在包上面使用注解？这个用法和在其他地方使用注解一样，只是被标注的元素变成了包，在运行时可以获取到包的注解，然后做你想做的事情吧！</p>

<h3>中文</h3>

<p>一开始我们提到了句号的问题（那的确是一个问题），最后我们来看看中文在写文档注释的时候也非常值得注意的一点（其实不只是 Javadoc 文档注释，该建议也适用于其他一些情况）：在中文和英文、数字中间插入一个空格（本文就是这样排版的）。</p>

<p>比如说：</p>

<ul>
<li>我觉得Java非常cool，特别是JDK8中的lambda，真希望9能带来更多实用特性</li>
<li>我觉得 Java 非常 cool，特别是 JDK8 中的 lambda，真希望 9 能带来更多实用特性</li>
</ul>


<p>后者看上去就比前者更舒服一些，这样的排版方式适合纯文本编辑器，如果使用的是 Office 之类的工具就不需要手动空格了，因为它们默认已经处理的很好了。</p>

<h3>总结</h3>

<p>本文介绍了一些 Javadoc 文档注释相关的细节，从这冰山一角相信你对 Java 也有了另一番体验（Java 的进化、工业化）。</p>

<p>总结一下本文内容：</p>

<ul>
<li>对于文档标记，大家可以尽量尝试使用：把自己的思想通过适合的方式表达给他人是一种好习惯</li>
<li>对于风格相关，大家也可以适当尝试（处女座/强迫症就算了）：某大厂在某次改句号问题后出现过生产故障</li>
</ul>


<p>不过，大家也千万不要太较真，毕竟对于一个好的程序来说，代码应该就是它的文档（之一）。</p>

<p>@转自 <a href="http://88250.b3log.org/when-the-little-things-count-javadoc">http://88250.b3log.org/when-the-little-things-count-javadoc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java基础之ClassLoader]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/26/java-classloader/"/>
    <updated>2014-04-26T21:47:23+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/26/java-classloader</id>
    <content type="html"><![CDATA[<h3>什么是类加载器</h3>

<p>类加载器是一个用来加载类文件的类。Java源代码通过javac编译器编译成类文件。然后JVM来执行类文件中的字节码来执行程序。类加载器负责加载文件系统、网络或其他来源的类文件。有三种默认使用的类加载器：Bootstrap类加载器、Extension类加载器和System类加载器（在HotSpot中的实现叫作Application类加载器）。每种类加载器都有设定好从哪里加载类。</p>

<ul>
<li>Bootstrap类加载器负责加载rt.jar中的JDK类文件，它是所有类加载器的父加载器。Bootstrap类加载器没有任何父类加载器，如果你调用<code>String.class.getClassLoader()</code>，会返回<code>null</code>，任何基于此的代码会抛出<code>NUllPointerException</code>异常。Bootstrap加载器被称为初始类加载器。</li>
<li>而Extension将加载类的请求先委托给它的父加载器，也就是Bootstrap，如果没有成功加载的话，再从jre/lib/ext目录下或者java.ext.dirs系统属性定义的目录下加载类。Extension加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现。</li>
<li>第三种默认的加载器就是System类加载器（又叫作Application类加载器）了。它负责从classpath环境变量中加载某些应用相关的类，classpath环境变量通常由-classpath或-cp命令行选项来定义，或者是JAR中的Manifest的classpath属性。Application类加载器是Extension类加载器的子加载器。通过<code>sun.misc.Launcher$AppClassLoader</code>实现。</li>
</ul>


<p>除了Bootstrap类加载器是大部分由C++来写的，其他的类加载器都是通过继承<code>java.lang.ClassLoader</code>来实现的。</p>

<p><img src="/images/java_classloader_hierarchy.png"></p>

<h3>类加载器的工作原理</h3>

<p>类加载器的工作原理基于三个机制：委托、可见性和单一性。这一节，我们来详细看看这些规则，并用一个实例来理解工作原理。下面显示的是类加载器使用委托机制的工作原理。</p>

<h4>委托机制</h4>

<p>当一个类加载和初始化的时候，类仅在有需要加载的时候被加载。假设你有一个应用需要的类叫作<code>Abc.class</code>，首先加载这个类的请求由Application类加载器委托给它的父类加载器Extension类加载器，然后再委托给Bootstrap类加载器。Bootstrap类加载器会先看看rt.jar中有没有这个类，因为并没有这个类，所以这个请求由回到Extension类加载器，它会查看jre/lib/ext目录下有没有这个类，如果这个类被Extension类加载器找到了，那么它将被加载，而Application类加载器不会加载这个类；而如果这个类没有被Extension类加载器找到，那么再由Application类加载器从classpath中寻找。</p>

<h4>可见性机制</h4>

<p>根据可见性机制，子类加载器可以看到父类加载器加载的类，而反之则不行。所以下面的例子中，当Abc.class已经被Application类加载器加载过了，然后如果想要使用Extension类加载器加载这个类，将会抛出<code>java.lang.ClassNotFoundException</code>异常。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kn">package</span> <span class="n">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.logging.Level</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Java program to demonstrate How ClassLoader works in Java,</span>
</span><span class='line'><span class="cm"> * in particular about visibility principle of ClassLoader.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author Javin Paul</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassLoaderTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//printing ClassLoader of this class</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ClassLoaderTest.getClass().getClassLoader() : &quot;</span>
</span><span class='line'>                                 <span class="o">+</span> <span class="n">ClassLoaderTest</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//trying to explicitly load this class again using Extension class loader</span>
</span><span class='line'>            <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;test.ClassLoaderTest&quot;</span><span class="o">,</span> <span class="kc">true</span>
</span><span class='line'>                            <span class="o">,</span>  <span class="n">ClassLoaderTest</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">().</span><span class="na">getParent</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ClassLoaderTest</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">log</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">SEVERE</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>ClassLoaderTest.getClass().getClassLoader() : sun.misc.Launcher$AppClassLoader@601bb1
</span><span class='line'>16/08/2012 2:43:48 AM test.ClassLoaderTest main
</span><span class='line'>SEVERE: null
</span><span class='line'>java.lang.ClassNotFoundException: test.ClassLoaderTest
</span><span class='line'>        at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
</span><span class='line'>        at java.security.AccessController.doPrivileged(Native Method)
</span><span class='line'>        at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
</span><span class='line'>        at sun.misc.Launcher$ExtClassLoader.findClass(Launcher.java:229)
</span><span class='line'>        at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
</span><span class='line'>        at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
</span><span class='line'>        at java.lang.Class.forName0(Native Method)
</span><span class='line'>        at java.lang.Class.forName(Class.java:247)
</span><span class='line'>        at test.ClassLoaderTest.main(ClassLoaderTest.java:29)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>单一性机制</h4>

<p>根据这个机制，父加载器加载过的类不能被子加载器加载第二次。虽然重写违反委托和单一性机制的类加载器是可能的，但这样做并不可取。你写自己的类加载器的时候应该严格遵守这三条机制。</p>

<h3>如何显式的加载类</h3>

<p>Java提供了显式加载类的API：<code>Class.forName(classname)</code>和<code>Class.forName(classname, initialized, classloader)</code>。就像上面的例子中，你可以指定类加载器的名称以及要加载的类的名称。类的加载是通过调用<code>java.lang.ClassLoader的loadClass()</code>方法，而<code>loadClass()</code>方法则调用了<code>findClass()</code>方法来定位相应类的字节码。在这个例子中Extension类加载器使用了<code>java.net.URLClassLoader</code>，它从JAR和目录中进行查找类文件，所有以”/”结尾的查找路径被认为是目录。如果<code>findClass()</code>没有找到那么它会抛出<code>java.lang.ClassNotFoundException</code>异常，而如果找到的话则会调用<code>defineClass()</code>将字节码转化成类实例，然后返回。</p>

<h3>什么地方使用类加载器</h3>

<p>类加载器是个很强大的概念，很多地方被运用。最经典的例子就是AppletClassLoader，它被用来加载Applet使用的类，而Applets大部分是在网上使用，而非本地的操作系统使用。使用不同的类加载器，你可以从不同的源地址加载同一个类，它们被视为不同的类。J2EE使用多个类加载器加载不同地方的类，例如WAR文件由Web-app类加载器加载，而EJB-JAR中的类由另外的类加载器加载。有些服务器也支持热部署，这也由类加载器实现。你也可以使用类加载器来加载数据库或者其他持久层的数据。</p>

<p>参考资料：</p>

<ul>
<li><a href="http://www.importnew.com/6581.html">http://www.importnew.com/6581.html</a></li>
<li><a href="http://www.blogjava.net/mstar/archive/2006/08/24/65505.html">http://www.blogjava.net/mstar/archive/2006/08/24/65505.html</a></li>
<li><a href="http://blog.csdn.net/xyang81/article/details/7292380">http://blog.csdn.net/xyang81/article/details/7292380</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Java快速处理大数据量的输入]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/07/faster-java-io-in-acm/"/>
    <updated>2014-04-07T14:37:20+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/07/faster-java-io-in-acm</id>
    <content type="html"><![CDATA[<p>这里以读取<code>int</code>类型的数据为例。</p>

<h3><code>Scanner</code></h3>

<h4>直接使用<code>nextInt()</code></h4>

<p>虽然是最方便的，但是也是最慢的。建议数据量小的时候使用。数据量大的情况下多半会超时。直接使用<code>nextInt()</code>方法的时候一般都会用<code>BufferedInputStream</code>封装一下输入流，速度能稍微快一些。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">BufferedInputStream</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLong</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">cols</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scanner</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>使用<code>next()</code>, 然后手动<code>Integer.parseInt()</code></h4>

<p>这样能比直接使用<code>nextInt()</code>快不少，查看一下<code>nextInt()</code>的源码我们可以发现：<code>nextInt()</code>方法先用正则表达式从流中获取一个表示整型的字符串<code>s</code>，最后再返回<code>Integer.parseInt(s)</code>。多出的时间都消耗在进行模式匹配上了，这其实也就是直接使用<code>nextInt()</code>比较慢的原因之一。而如果我们事先知道输入的数据类型的话，就不用进行匹配，直接解析就可以了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">BufferedInputStream</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">cols</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scanner</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3><code>BufferedReader</code> + <code>StringTokenizer</code></h3>

<p>使用<code>BufferedReader</code>按行读取，然后使用<code>StringTokenizer</code>获取每一行中使用空格符隔开的所有元素。速度甚至比C语言的<code>scanf()</code>还要快。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
</span><span class='line'><span class="n">StringTokenizer</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'><span class="kt">long</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">cols</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(!</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>实际测试结果</h3>

<p>用以上三种方式从文件中读取10,000,000个<code>int</code>型数值所消耗的时间分别为 11.52秒，7.486秒，2.159秒。使用gcc的<code>fscanf()</code>所用时间为 5.303秒。</p>

<p>读取10,000,000个<code>double</code>型数值所消耗的时间分别为 41.125秒，16.082秒，9.271秒。使用gcc的<code>fscanf()</code>所用时间为 11.279秒。</p>

<h3>总结</h3>

<p>虽然使用<code>BufferedReader</code>和<code>StringTokenizer</code>处理输入可以获得让人满意的速度，但是需要写的代码相对来说是比较多的。在ACM比赛时可以准备一个工具类，比赛开始时，让一个人先把这个类写出来备用。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/** Class for buffered reading int and double values */</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Reader</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">BufferedReader</span> <span class="n">reader</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">StringTokenizer</span> <span class="n">tokenizer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** call this method to initialize reader for InputStream */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span>
</span><span class='line'>                     <span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">input</span><span class="o">)</span> <span class="o">);</span>
</span><span class='line'>        <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** get next word */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">String</span> <span class="nf">next</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span> <span class="o">!</span> <span class="n">tokenizer</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//TODO add check for eof if necessary</span>
</span><span class='line'>            <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span>
</span><span class='line'>                   <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">nextInt</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span> <span class="n">next</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kt">double</span> <span class="nf">nextDouble</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Double</span><span class="o">.</span><span class="na">parseDouble</span><span class="o">(</span> <span class="n">next</span><span class="o">()</span> <span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>参考资料</h4>

<ul>
<li><a href="http://www.cpe.ku.ac.th/~jim/java-io.html">http://www.cpe.ku.ac.th/~jim/java-io.html</a></li>
<li><a href="http://stackoverflow.com/questions/2446805/is-java-util-scanner-that-slow">http://stackoverflow.com/questions/2446805/is-java-util-scanner-that-slow</a></li>
<li><a href="http://spc10.contest.scrool.se/doc/javaio">http://spc10.contest.scrool.se/doc/javaio</a></li>
<li><a href="http://www.javamex.com/tutorials/regular_expressions/splitting_tokenisation_performance.shtml">http://www.javamex.com/tutorials/regular_expressions/splitting_tokenisation_performance.shtml</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(10): Annotations]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/06/java-8-annotations/"/>
    <updated>2014-04-06T16:10:57+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/06/java-8-annotations</id>
    <content type="html"><![CDATA[<h3>Annotations</h3>

<p>Java 8 中 annotations 是可重复的。我们通过下面这里例子来看一下。</p>

<p>首先，我们定义一个包装器annotation，其中存放着真正的annotations的数组：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@interface</span> <span class="n">Hints</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Hint</span><span class="o">[]</span> <span class="nf">value</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repeatable</span><span class="o">(</span><span class="n">Hints</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@interface</span> <span class="n">Hint</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">value</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Java 8 中我们可以使用添加<code>@Repeatable</code>来使用多个同种类型的注解。</p>

<p>变体1：使用容器annotation（过去的方法）</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Hints</span><span class="o">({</span><span class="nd">@Hint</span><span class="o">(</span><span class="s">&quot;hint1&quot;</span><span class="o">),</span> <span class="nd">@Hint</span><span class="o">(</span><span class="s">&quot;hint2&quot;</span><span class="o">)})</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>变体2：使用可重复的annotations（新式方法）</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Hint</span><span class="o">(</span><span class="s">&quot;hint1&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Hint</span><span class="o">(</span><span class="s">&quot;hint2&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>使用变体2时，java编译器隐式的使用了<code>@Hints</code>注解。这在通过反射获取注解信息时显得尤为重要。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Hint</span> <span class="n">hint</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">Hint</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hint</span><span class="o">);</span>                   <span class="c1">// null</span>
</span><span class='line'>
</span><span class='line'><span class="n">Hints</span> <span class="n">hints1</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">Hints</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hints1</span><span class="o">.</span><span class="na">value</span><span class="o">().</span><span class="na">length</span><span class="o">);</span>  <span class="c1">// 2</span>
</span><span class='line'>
</span><span class='line'><span class="n">Hint</span><span class="o">[]</span> <span class="n">hints2</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getAnnotationsByType</span><span class="o">(</span><span class="n">Hint</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hints2</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>          <span class="c1">// 2</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>尽管我们在<code>Person</code>类上从未声明过<code>@Hints</code>，但是仍然可以通过<code>getAnnotation(Hints.class)</code>访问到它。然而，还有一个更方便的方法<code>getAnnotationsByType</code>，通过它能直接获取到所有标注为<code>@Hint</code>的注解。</p>

<p>另外，Java 8 中的annotations还扩展了两个新的target：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Target</span><span class="o">({</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE_PARAMETER</span><span class="o">,</span> <span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE_USE</span><span class="o">})</span>
</span><span class='line'><span class="nd">@interface</span> <span class="n">MyAnnotation</span> <span class="o">{}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 8 简明教程(9): Date API]]></title>
    <link href="http://www.solohsu.com/blog/2014/04/06/java-8-date-api/"/>
    <updated>2014-04-06T00:42:44+08:00</updated>
    <id>http://www.solohsu.com/blog/2014/04/06/java-8-date-api</id>
    <content type="html"><![CDATA[<h3>Date API</h3>

<p>在Java 8的java.time包中包含了一组全新的date和time相关的API。新的Date API与Joda-Time库很类似，但是并不完全一样。在下面的示例中将看到新API中的最重要的部分是如何使用的。</p>

<h4>Clock</h4>

<p><code>Clock</code>用来获取当前的date和time。<code>Clock</code>可以区分不同时区，也可以用来代替<code>System.currentTimeMillis()</code>来获取当前的毫秒数。作为一个时间线上的一点，当前的毫秒数也可以使用<code>Instant</code>类来表示。<code>Instant</code>可以被用来创建遗留的<code>java.util.Date</code>对象。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Clock</span> <span class="n">clock</span> <span class="o">=</span> <span class="n">Clock</span><span class="o">.</span><span class="na">systemDefaultZone</span><span class="o">();</span>
</span><span class='line'><span class="kt">long</span> <span class="n">millis</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="na">millis</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Instant</span> <span class="n">instant</span> <span class="o">=</span> <span class="n">clock</span><span class="o">.</span><span class="na">instant</span><span class="o">();</span>
</span><span class='line'><span class="n">Date</span> <span class="n">legacyDate</span> <span class="o">=</span> <span class="n">Date</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">instant</span><span class="o">);</span>   <span class="c1">// legacy java.util.Date</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Timezones</h4>

<p>时区使用一个<code>ZoneId</code>对象来表示，可以使用<code>ZoneId</code>的静态工厂方法很方便的获取一个时区对象。时区实际上就是定义了一个偏移量，这个偏移量在进行instant与本地的date、time进行转换时很重要。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ZoneId</span><span class="o">.</span><span class="na">getAvailableZoneIds</span><span class="o">());</span>
</span><span class='line'><span class="c1">// prints all available timezone ids</span>
</span><span class='line'>
</span><span class='line'><span class="n">ZoneId</span> <span class="n">zone1</span> <span class="o">=</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;Europe/Berlin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ZoneId</span> <span class="n">zone2</span> <span class="o">=</span> <span class="n">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;Brazil/East&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zone1</span><span class="o">.</span><span class="na">getRules</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zone2</span><span class="o">.</span><span class="na">getRules</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ZoneRules[currentStandardOffset=+01:00]</span>
</span><span class='line'><span class="c1">// ZoneRules[currentStandardOffset=-03:00]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>LocalTime</h4>

<p><code>LocalTime</code>表示一个无时区的时间，例如 10pm 或者 17:30:15。下面的例子中分别为上面定义的两个timezone创建了一个localtime，然后对两个时间进行比较，并计算小时和分钟的差值。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">LocalTime</span> <span class="n">now1</span> <span class="o">=</span> <span class="n">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="n">zone1</span><span class="o">);</span>
</span><span class='line'><span class="n">LocalTime</span> <span class="n">now2</span> <span class="o">=</span> <span class="n">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="n">zone2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">now1</span><span class="o">.</span><span class="na">isBefore</span><span class="o">(</span><span class="n">now2</span><span class="o">));</span>  <span class="c1">// false</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">hoursBetween</span> <span class="o">=</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">HOURS</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="n">now1</span><span class="o">,</span> <span class="n">now2</span><span class="o">);</span>
</span><span class='line'><span class="kt">long</span> <span class="n">minutesBetween</span> <span class="o">=</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">MINUTES</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="n">now1</span><span class="o">,</span> <span class="n">now2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hoursBetween</span><span class="o">);</span>       <span class="c1">// -3</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">minutesBetween</span><span class="o">);</span>     <span class="c1">// -239</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>LocalTime</code>自带了各种工厂方法来简化实例的创建，其中就包括解析时间字符串。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">LocalTime</span> <span class="n">late</span> <span class="o">=</span> <span class="n">LocalTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">23</span><span class="o">,</span> <span class="mi">59</span><span class="o">,</span> <span class="mi">59</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">late</span><span class="o">);</span>       <span class="c1">// 23:59:59</span>
</span><span class='line'>
</span><span class='line'><span class="n">DateTimeFormatter</span> <span class="n">germanFormatter</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">DateTimeFormatter</span>
</span><span class='line'>        <span class="o">.</span><span class="na">ofLocalizedTime</span><span class="o">(</span><span class="n">FormatStyle</span><span class="o">.</span><span class="na">SHORT</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">withLocale</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">GERMAN</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">LocalTime</span> <span class="n">leetTime</span> <span class="o">=</span> <span class="n">LocalTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;13:37&quot;</span><span class="o">,</span> <span class="n">germanFormatter</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">leetTime</span><span class="o">);</span>   <span class="c1">// 13:37</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>LocalDate</h4>

<p><code>LocalDate</code>表示一个明确的日期。它是不可变的，工作方式与<code>LocalTime</code>类似。下面的例子演示了如何通过加/减天数、月数、年数来计算新的日期。需要注意的是每次操作返回的都是一个新的实例。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">LocalDate</span> <span class="n">today</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">tomorrow</span> <span class="o">=</span> <span class="n">today</span><span class="o">.</span><span class="na">plus</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">DAYS</span><span class="o">);</span>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">yesterday</span> <span class="o">=</span> <span class="n">tomorrow</span><span class="o">.</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">independenceDay</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">JULY</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'><span class="n">DayOfWeek</span> <span class="n">dayOfWeek</span> <span class="o">=</span> <span class="n">independenceDay</span><span class="o">.</span><span class="na">getDayOfWeek</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dayOfWeek</span><span class="o">);</span>    <span class="c1">// FRIDAY</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>同样可以将字符串解析成一个LocalDate对象：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DateTimeFormatter</span> <span class="n">germanFormatter</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">DateTimeFormatter</span>
</span><span class='line'>        <span class="o">.</span><span class="na">ofLocalizedDate</span><span class="o">(</span><span class="n">FormatStyle</span><span class="o">.</span><span class="na">MEDIUM</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">withLocale</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">GERMAN</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">LocalDate</span> <span class="n">xmas</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;24.12.2014&quot;</span><span class="o">,</span> <span class="n">germanFormatter</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">xmas</span><span class="o">);</span>   <span class="c1">// 2014-12-24</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>LocalDateTime</h4>

<p><code>LocalDateTime</code>表示一个date-time。它将date和time放到一个对象中。<code>LocalDateTime</code>是不可变的，工作方式和<code>LocalTime</code>,<code>LocalDate</code>也类似。我们可以利用方法来获取date-time中的各个字段：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">LocalDateTime</span> <span class="n">sylvester</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2014</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">DECEMBER</span><span class="o">,</span> <span class="mi">31</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">59</span><span class="o">,</span> <span class="mi">59</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">DayOfWeek</span> <span class="n">dayOfWeek</span> <span class="o">=</span> <span class="n">sylvester</span><span class="o">.</span><span class="na">getDayOfWeek</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dayOfWeek</span><span class="o">);</span>      <span class="c1">// WEDNESDAY</span>
</span><span class='line'>
</span><span class='line'><span class="n">Month</span> <span class="n">month</span> <span class="o">=</span> <span class="n">sylvester</span><span class="o">.</span><span class="na">getMonth</span><span class="o">();</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">month</span><span class="o">);</span>          <span class="c1">// DECEMBER</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">minuteOfDay</span> <span class="o">=</span> <span class="n">sylvester</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="n">ChronoField</span><span class="o">.</span><span class="na">MINUTE_OF_DAY</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">minuteOfDay</span><span class="o">);</span>    <span class="c1">// 1439</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>给定一个时区信息的话可以将它转换成一个instant对象。然后可以将<code>Instant</code>对象转换成遗留的时间对象<code>java.util.Date</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Instant</span> <span class="n">instant</span> <span class="o">=</span> <span class="n">sylvester</span>
</span><span class='line'>        <span class="o">.</span><span class="na">atZone</span><span class="o">(</span><span class="n">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">toInstant</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Date</span> <span class="n">legacyDate</span> <span class="o">=</span> <span class="n">Date</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">instant</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">legacyDate</span><span class="o">);</span>     <span class="c1">// Wed Dec 31 23:59:59 CET 2014</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>date-time的格式化与date、time的格式化类似。除了使用预定义的格式之外，我们还可以使用自定义的pattern创建新的formatter对象：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">DateTimeFormatter</span> <span class="n">formatter</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">DateTimeFormatter</span>
</span><span class='line'>        <span class="o">.</span><span class="na">ofPattern</span><span class="o">(</span><span class="s">&quot;MMM dd, yyyy - HH:mm&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">LocalDateTime</span> <span class="n">parsed</span> <span class="o">=</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;Nov 03, 2014 - 07:13&quot;</span><span class="o">,</span> <span class="n">formatter</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">formatter</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">parsed</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">string</span><span class="o">);</span>     <span class="c1">// Nov 03, 2014 - 07:13</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>与<code>java.text.NumberFormat</code>不同的是，新创建的<code>DateTimeFormatter</code>对象是不可更改并且线程安全的。</p>

<p>关于pattern语法的详细信息参看<a href="http://download.java.net/jdk8/docs/api/java/time/format/DateTimeFormatter.html">官方文档</a></p>
]]></content>
  </entry>
  
</feed>
